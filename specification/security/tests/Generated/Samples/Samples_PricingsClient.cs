// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_PricingsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPricings()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            Response response = client.GetPricings(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPricings_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            Response response = client.GetPricings(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pricingTier").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("subPlan").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("freeTrialRemainingTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("enablementTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("deprecated").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("replacedBy")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("additionalExtensionProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPricings_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            Response response = await client.GetPricingsAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPricings_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            Response response = await client.GetPricingsAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pricingTier").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("subPlan").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("freeTrialRemainingTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("enablementTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("deprecated").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("replacedBy")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("additionalExtensionProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPricing()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            Response response = client.GetPricing("<pricingName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPricing_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            Response response = client.GetPricing("<pricingName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("pricingTier").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("subPlan").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("freeTrialRemainingTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("enablementTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("deprecated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("replacedBy")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("additionalExtensionProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPricing_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            Response response = await client.GetPricingAsync("<pricingName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPricing_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            Response response = await client.GetPricingAsync("<pricingName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("pricingTier").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("subPlan").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("freeTrialRemainingTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("enablementTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("deprecated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("replacedBy")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("additionalExtensionProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = client.Update("<pricingName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    pricingTier = "Free",
                    subPlan = "<subPlan>",
                    extensions = new[] {
            new {
                name = "<name>",
                isEnabled = "True",
                additionalExtensionProperties = new {
                    key = new {},
                },
            }
        },
                },
            };

            Response response = client.Update("<pricingName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("pricingTier").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("subPlan").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("freeTrialRemainingTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("enablementTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("deprecated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("replacedBy")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("additionalExtensionProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = await client.UpdateAsync("<pricingName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PricingsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    pricingTier = "Free",
                    subPlan = "<subPlan>",
                    extensions = new[] {
            new {
                name = "<name>",
                isEnabled = "True",
                additionalExtensionProperties = new {
                    key = new {},
                },
            }
        },
                },
            };

            Response response = await client.UpdateAsync("<pricingName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("pricingTier").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("subPlan").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("freeTrialRemainingTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("enablementTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("deprecated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("replacedBy")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("additionalExtensionProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("extensions")[0].GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }
    }
}
