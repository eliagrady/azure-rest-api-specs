// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_DefenderForStorageClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDefenderForStorage()
        {
            var credential = new DefaultAzureCredential();
            var client = new DefenderForStorageClient(credential);

            Response response = client.GetDefenderForStorage("<resourceId>", "<settingName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDefenderForStorage_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new DefenderForStorageClient(credential);

            Response response = client.GetDefenderForStorage("<resourceId>", "<settingName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("onUpload").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("onUpload").GetProperty("capGBPerMonth").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("overrideSubscriptionLevelSettings").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDefenderForStorage_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DefenderForStorageClient(credential);

            Response response = await client.GetDefenderForStorageAsync("<resourceId>", "<settingName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDefenderForStorage_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DefenderForStorageClient(credential);

            Response response = await client.GetDefenderForStorageAsync("<resourceId>", "<settingName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("onUpload").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("onUpload").GetProperty("capGBPerMonth").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("overrideSubscriptionLevelSettings").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create()
        {
            var credential = new DefaultAzureCredential();
            var client = new DefenderForStorageClient(credential);

            var data = new { };

            Response response = client.Create("<resourceId>", "<settingName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new DefenderForStorageClient(credential);

            var data = new
            {
                properties = new
                {
                    isEnabled = true,
                    malwareScanning = new
                    {
                        onUpload = new
                        {
                            isEnabled = true,
                            capGBPerMonth = 1234,
                        },
                    },
                    sensitiveDataDiscovery = new
                    {
                        isEnabled = true,
                    },
                    overrideSubscriptionLevelSettings = true,
                },
            };

            Response response = client.Create("<resourceId>", "<settingName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("onUpload").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("onUpload").GetProperty("capGBPerMonth").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("overrideSubscriptionLevelSettings").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DefenderForStorageClient(credential);

            var data = new { };

            Response response = await client.CreateAsync("<resourceId>", "<settingName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DefenderForStorageClient(credential);

            var data = new
            {
                properties = new
                {
                    isEnabled = true,
                    malwareScanning = new
                    {
                        onUpload = new
                        {
                            isEnabled = true,
                            capGBPerMonth = 1234,
                        },
                    },
                    sensitiveDataDiscovery = new
                    {
                        isEnabled = true,
                    },
                    overrideSubscriptionLevelSettings = true,
                },
            };

            Response response = await client.CreateAsync("<resourceId>", "<settingName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("onUpload").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("onUpload").GetProperty("capGBPerMonth").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("malwareScanning").GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("operationStatus").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveDataDiscovery").GetProperty("operationStatus").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("overrideSubscriptionLevelSettings").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }
    }
}
