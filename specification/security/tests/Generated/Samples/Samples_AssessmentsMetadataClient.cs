// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_AssessmentsMetadataClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssessmentsMetadata()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = client.GetAssessmentsMetadata("<assessmentMetadataName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssessmentsMetadata_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = client.GetAssessmentsMetadata("<assessmentMetadataName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAssessmentsMetadata_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = await client.GetAssessmentsMetadataAsync("<assessmentMetadataName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAssessmentsMetadata_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = await client.GetAssessmentsMetadataAsync("<assessmentMetadataName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInSubscription()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = client.GetInSubscription("<assessmentMetadataName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInSubscription_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = client.GetInSubscription("<assessmentMetadataName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInSubscription_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = await client.GetInSubscriptionAsync("<assessmentMetadataName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInSubscription_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = await client.GetInSubscriptionAsync("<assessmentMetadataName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateInSubscription()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            var data = new { };

            Response response = client.CreateInSubscription("<assessmentMetadataName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateInSubscription_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    publishDates = new
                    {
                        GA = "<GA>",
                        @public = "<public>",
                    },
                    plannedDeprecationDate = "<plannedDeprecationDate>",
                    tactics = new[] {
            "Reconnaissance"
        },
                    techniques = new[] {
            "Abuse Elevation Control Mechanism"
        },
                    displayName = "<displayName>",
                    description = "<description>",
                    remediationDescription = "<remediationDescription>",
                    categories = new[] {
            "Compute"
        },
                    severity = "Low",
                    userImpact = "Low",
                    implementationEffort = "Low",
                    threats = new[] {
            "accountBreach"
        },
                    preview = true,
                    assessmentType = "BuiltIn",
                    partnerData = new
                    {
                        partnerName = "<partnerName>",
                        productName = "<productName>",
                        secret = "<secret>",
                    },
                },
            };

            Response response = client.CreateInSubscription("<assessmentMetadataName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateInSubscription_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            var data = new { };

            Response response = await client.CreateInSubscriptionAsync("<assessmentMetadataName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateInSubscription_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    publishDates = new
                    {
                        GA = "<GA>",
                        @public = "<public>",
                    },
                    plannedDeprecationDate = "<plannedDeprecationDate>",
                    tactics = new[] {
            "Reconnaissance"
        },
                    techniques = new[] {
            "Abuse Elevation Control Mechanism"
        },
                    displayName = "<displayName>",
                    description = "<description>",
                    remediationDescription = "<remediationDescription>",
                    categories = new[] {
            "Compute"
        },
                    severity = "Low",
                    userImpact = "Low",
                    implementationEffort = "Low",
                    threats = new[] {
            "accountBreach"
        },
                    preview = true,
                    assessmentType = "BuiltIn",
                    partnerData = new
                    {
                        partnerName = "<partnerName>",
                        productName = "<productName>",
                        secret = "<secret>",
                    },
                },
            };

            Response response = await client.CreateInSubscriptionAsync("<assessmentMetadataName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteInSubscription()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = client.DeleteInSubscription("<assessmentMetadataName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteInSubscription_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = client.DeleteInSubscription("<assessmentMetadataName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteInSubscription_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = await client.DeleteInSubscriptionAsync("<assessmentMetadataName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteInSubscription_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            Response response = await client.DeleteInSubscriptionAsync("<assessmentMetadataName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllAssessmentsMetadata()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            foreach (var item in client.GetAllAssessmentsMetadata(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllAssessmentsMetadata_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            foreach (var item in client.GetAllAssessmentsMetadata(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllAssessmentsMetadata_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAllAssessmentsMetadataAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllAssessmentsMetadata_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAllAssessmentsMetadataAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllAssessmentsMetadataBySubscription()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            foreach (var item in client.GetAllAssessmentsMetadataBySubscription(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllAssessmentsMetadataBySubscription_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            foreach (var item in client.GetAllAssessmentsMetadataBySubscription(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllAssessmentsMetadataBySubscription_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAllAssessmentsMetadataBySubscriptionAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllAssessmentsMetadataBySubscription_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssessmentsMetadataClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAllAssessmentsMetadataBySubscriptionAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("GA").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishDates").GetProperty("public").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("plannedDeprecationDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("tactics")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("techniques")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("policyDefinitionId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDescription").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("categories")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("severity").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userImpact").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("implementationEffort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("threats")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("preview").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("assessmentType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("partnerName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("productName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("partnerData").GetProperty("secret").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
