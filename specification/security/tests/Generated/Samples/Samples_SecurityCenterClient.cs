// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_SecurityCenterClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateSensitivitySettings()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityCenterClient(credential);

            var data = new
            {
                sensitiveInfoTypesIds = new[] {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
            };

            Response response = client.UpdateSensitivitySettings(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateSensitivitySettings_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityCenterClient(credential);

            var data = new
            {
                sensitiveInfoTypesIds = new[] {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
                sensitivityThresholdLabelOrder = 123.45f,
                sensitivityThresholdLabelId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            };

            Response response = client.UpdateSensitivitySettings(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveInfoTypesIds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitivityThresholdLabelOrder").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitivityThresholdLabelId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("mipIntegrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateSensitivitySettings_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityCenterClient(credential);

            var data = new
            {
                sensitiveInfoTypesIds = new[] {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
            };

            Response response = await client.UpdateSensitivitySettingsAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateSensitivitySettings_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityCenterClient(credential);

            var data = new
            {
                sensitiveInfoTypesIds = new[] {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
                sensitivityThresholdLabelOrder = 123.45f,
                sensitivityThresholdLabelId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            };

            Response response = await client.UpdateSensitivitySettingsAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveInfoTypesIds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitivityThresholdLabelOrder").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitivityThresholdLabelId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("mipIntegrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSensitivitySettings()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityCenterClient(credential);

            Response response = client.GetSensitivitySettings(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSensitivitySettings_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityCenterClient(credential);

            Response response = client.GetSensitivitySettings(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveInfoTypesIds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitivityThresholdLabelOrder").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitivityThresholdLabelId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("mipIntegrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSensitivitySettings_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityCenterClient(credential);

            Response response = await client.GetSensitivitySettingsAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSensitivitySettings_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityCenterClient(credential);

            Response response = await client.GetSensitivitySettingsAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitiveInfoTypesIds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitivityThresholdLabelOrder").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sensitivityThresholdLabelId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("mipIntegrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("labels")[0].GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("customInfoTypes")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("mipInformation").GetProperty("builtInInfoTypes")[0].GetProperty("type").ToString());
        }
    }
}
