// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_GovernanceRulesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGovernanceRule()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            Response response = client.GetGovernanceRule("<scope>", "<ruleId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGovernanceRule_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            Response response = client.GetGovernanceRule("<scope>", "<ruleId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationTimeframe").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rulePriority").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isDisabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("excludedScopes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("includeMemberScopes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedOn").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGovernanceRule_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            Response response = await client.GetGovernanceRuleAsync("<scope>", "<ruleId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGovernanceRule_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            Response response = await client.GetGovernanceRuleAsync("<scope>", "<ruleId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationTimeframe").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rulePriority").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isDisabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("excludedScopes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("includeMemberScopes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedOn").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var data = new { };

            Response response = client.CreateOrUpdate("<scope>", "<ruleId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var data = new
            {
                properties = new
                {
                    displayName = "<displayName>",
                    description = "<description>",
                    remediationTimeframe = "<remediationTimeframe>",
                    isGracePeriod = true,
                    rulePriority = 1234,
                    isDisabled = true,
                    ruleType = "Integrated",
                    sourceResourceType = "Assessments",
                    excludedScopes = new[] {
            "<String>"
        },
                    conditionSets = new[] {
            new {}
        },
                    includeMemberScopes = true,
                    ownerSource = new
                    {
                        type = "ByTag",
                        value = "<value>",
                    },
                    governanceEmailNotification = new
                    {
                        disableManagerEmailNotification = true,
                        disableOwnerEmailNotification = true,
                    },
                    metadata = new { },
                },
            };

            Response response = client.CreateOrUpdate("<scope>", "<ruleId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationTimeframe").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rulePriority").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isDisabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("excludedScopes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("includeMemberScopes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedOn").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var data = new { };

            Response response = await client.CreateOrUpdateAsync("<scope>", "<ruleId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var data = new
            {
                properties = new
                {
                    displayName = "<displayName>",
                    description = "<description>",
                    remediationTimeframe = "<remediationTimeframe>",
                    isGracePeriod = true,
                    rulePriority = 1234,
                    isDisabled = true,
                    ruleType = "Integrated",
                    sourceResourceType = "Assessments",
                    excludedScopes = new[] {
            "<String>"
        },
                    conditionSets = new[] {
            new {}
        },
                    includeMemberScopes = true,
                    ownerSource = new
                    {
                        type = "ByTag",
                        value = "<value>",
                    },
                    governanceEmailNotification = new
                    {
                        disableManagerEmailNotification = true,
                        disableOwnerEmailNotification = true,
                    },
                    metadata = new { },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<scope>", "<ruleId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationTimeframe").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rulePriority").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isDisabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("excludedScopes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("includeMemberScopes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdOn").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedOn").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OperationResults()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            Response response = client.OperationResults("<scope>", "<ruleId>", "<operationId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OperationResults_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            Response response = client.OperationResults("<scope>", "<ruleId>", "<operationId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OperationResults_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            Response response = await client.OperationResultsAsync("<scope>", "<ruleId>", "<operationId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OperationResults_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            Response response = await client.OperationResultsAsync("<scope>", "<ruleId>", "<operationId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGovernanceRules()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            foreach (var item in client.GetGovernanceRules("<scope>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGovernanceRules_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            foreach (var item in client.GetGovernanceRules("<scope>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationTimeframe").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rulePriority").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isDisabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("excludedScopes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("includeMemberScopes").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedBy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedOn").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGovernanceRules_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            await foreach (var item in client.GetGovernanceRulesAsync("<scope>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGovernanceRules_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            await foreach (var item in client.GetGovernanceRulesAsync("<scope>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationTimeframe").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rulePriority").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isDisabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("excludedScopes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("includeMemberScopes").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("ownerSource").GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("createdOn").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedBy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("updatedOn").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var operation = client.Delete(WaitUntil.Completed, "<scope>", "<ruleId>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var operation = client.Delete(WaitUntil.Completed, "<scope>", "<ruleId>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var operation = await client.DeleteAsync(WaitUntil.Completed, "<scope>", "<ruleId>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var operation = await client.DeleteAsync(WaitUntil.Completed, "<scope>", "<ruleId>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Execute()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var data = new { };

            var operation = client.Execute(WaitUntil.Completed, "<scope>", "<ruleId>", RequestContent.Create(data), new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Execute_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var data = new
            {
                @override = true,
            };

            var operation = client.Execute(WaitUntil.Completed, "<scope>", "<ruleId>", RequestContent.Create(data), new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Execute_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var data = new { };

            var operation = await client.ExecuteAsync(WaitUntil.Completed, "<scope>", "<ruleId>", RequestContent.Create(data), new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Execute_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceRulesClient(credential);

            var data = new
            {
                @override = true,
            };

            var operation = await client.ExecuteAsync(WaitUntil.Completed, "<scope>", "<ruleId>", RequestContent.Create(data), new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }
    }
}
