// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_ConnectorsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetConnector()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            Response response = client.GetConnector("<connectorName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetConnector_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            Response response = client.GetConnector("<connectorName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetConnector_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            Response response = await client.GetConnectorAsync("<connectorName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetConnector_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            Response response = await client.GetConnectorAsync("<connectorName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = client.CreateOrUpdate("<connectorName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    hybridComputeSettings = new
                    {
                        autoProvision = "On",
                        resourceGroupName = "<resourceGroupName>",
                        region = "<region>",
                        proxyServer = new
                        {
                            ip = "<ip>",
                            port = "<port>",
                        },
                        servicePrincipal = new
                        {
                            applicationId = "<applicationId>",
                            secret = "<secret>",
                        },
                    },
                    authenticationDetails = new
                    {
                        awsAccessKeyId = "<awsAccessKeyId>",
                        awsSecretAccessKey = "<awsSecretAccessKey>",
                        authenticationType = "awsCreds",
                    },
                },
            };

            Response response = client.CreateOrUpdate("<connectorName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = await client.CreateOrUpdateAsync("<connectorName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    hybridComputeSettings = new
                    {
                        autoProvision = "On",
                        resourceGroupName = "<resourceGroupName>",
                        region = "<region>",
                        proxyServer = new
                        {
                            ip = "<ip>",
                            port = "<port>",
                        },
                        servicePrincipal = new
                        {
                            applicationId = "<applicationId>",
                            secret = "<secret>",
                        },
                    },
                    authenticationDetails = new
                    {
                        awsAccessKeyId = "<awsAccessKeyId>",
                        awsSecretAccessKey = "<awsSecretAccessKey>",
                        authenticationType = "awsCreds",
                    },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<connectorName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            Response response = client.Delete("<connectorName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            Response response = client.Delete("<connectorName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<connectorName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<connectorName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetConnectors()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            foreach (var item in client.GetConnectors(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetConnectors_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            foreach (var item in client.GetConnectors(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetConnectors_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetConnectorsAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetConnectors_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ConnectorsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetConnectorsAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
