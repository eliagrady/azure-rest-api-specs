// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_AdaptiveApplicationControlsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAdaptiveApplicationControls()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.GetAdaptiveApplicationControls(true, true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAdaptiveApplicationControls_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.GetAdaptiveApplicationControls(true, true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("enforcementMode").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("protectionMode").GetProperty("exe").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("protectionMode").GetProperty("msi").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("protectionMode").GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("protectionMode").GetProperty("executable").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("recommendationStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("issues")[0].GetProperty("issue").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("issues")[0].GetProperty("numberOfVms").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("sourceSystem").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("enforcementSupport").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("action").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("publisherName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("binaryName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("common").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("userSids")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("fileType").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAdaptiveApplicationControls_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.GetAdaptiveApplicationControlsAsync(true, true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAdaptiveApplicationControls_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.GetAdaptiveApplicationControlsAsync(true, true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("enforcementMode").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("protectionMode").GetProperty("exe").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("protectionMode").GetProperty("msi").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("protectionMode").GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("protectionMode").GetProperty("executable").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("recommendationStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("issues")[0].GetProperty("issue").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("issues")[0].GetProperty("numberOfVms").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("sourceSystem").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("enforcementSupport").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("action").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("publisherName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("binaryName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("common").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("userSids")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("fileType").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAdaptiveApplicationControl()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.GetAdaptiveApplicationControl("<groupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAdaptiveApplicationControl_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.GetAdaptiveApplicationControl("<groupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("enforcementMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("exe").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("msi").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("executable").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("issues")[0].GetProperty("issue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("issues")[0].GetProperty("numberOfVms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSystem").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("enforcementSupport").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("action").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("publisherName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("binaryName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("common").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("userSids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("fileType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAdaptiveApplicationControl_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.GetAdaptiveApplicationControlAsync("<groupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAdaptiveApplicationControl_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.GetAdaptiveApplicationControlAsync("<groupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("enforcementMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("exe").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("msi").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("executable").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("issues")[0].GetProperty("issue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("issues")[0].GetProperty("numberOfVms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSystem").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("enforcementSupport").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("action").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("publisherName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("binaryName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("common").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("userSids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("fileType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                properties = new { },
            };

            Response response = client.Put("<groupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                properties = new
                {
                    enforcementMode = "Audit",
                    protectionMode = new
                    {
                        exe = "Audit",
                        msi = "Audit",
                        script = "Audit",
                        executable = "Audit",
                    },
                    vmRecommendations = new[] {
            new {
                configurationStatus = "Configured",
                recommendationAction = "Recommended",
                resourceId = "<resourceId>",
                enforcementSupport = "Supported",
            }
        },
                    pathRecommendations = new[] {
            new {
                path = "<path>",
                action = "Recommended",
                type = "IoT_ACRAuthentication",
                publisherInfo = new {
                    publisherName = "<publisherName>",
                    productName = "<productName>",
                    binaryName = "<binaryName>",
                    version = "<version>",
                },
                common = true,
                userSids = new[] {
                    "<String>"
                },
                usernames = new[] {
                    new {
                        username = "<username>",
                        recommendationAction = "Recommended",
                    }
                },
                fileType = "Exe",
                configurationStatus = "Configured",
            }
        },
                },
            };

            Response response = client.Put("<groupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("enforcementMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("exe").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("msi").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("executable").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("issues")[0].GetProperty("issue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("issues")[0].GetProperty("numberOfVms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSystem").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("enforcementSupport").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("action").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("publisherName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("binaryName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("common").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("userSids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("fileType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Put_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                properties = new { },
            };

            Response response = await client.PutAsync("<groupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Put_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                properties = new
                {
                    enforcementMode = "Audit",
                    protectionMode = new
                    {
                        exe = "Audit",
                        msi = "Audit",
                        script = "Audit",
                        executable = "Audit",
                    },
                    vmRecommendations = new[] {
            new {
                configurationStatus = "Configured",
                recommendationAction = "Recommended",
                resourceId = "<resourceId>",
                enforcementSupport = "Supported",
            }
        },
                    pathRecommendations = new[] {
            new {
                path = "<path>",
                action = "Recommended",
                type = "IoT_ACRAuthentication",
                publisherInfo = new {
                    publisherName = "<publisherName>",
                    productName = "<productName>",
                    binaryName = "<binaryName>",
                    version = "<version>",
                },
                common = true,
                userSids = new[] {
                    "<String>"
                },
                usernames = new[] {
                    new {
                        username = "<username>",
                        recommendationAction = "Recommended",
                    }
                },
                fileType = "Exe",
                configurationStatus = "Configured",
            }
        },
                },
            };

            Response response = await client.PutAsync("<groupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("enforcementMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("exe").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("msi").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("protectionMode").GetProperty("executable").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("issues")[0].GetProperty("issue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("issues")[0].GetProperty("numberOfVms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceSystem").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("vmRecommendations")[0].GetProperty("enforcementSupport").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("action").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("publisherName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("productName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("binaryName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("publisherInfo").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("common").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("userSids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("usernames")[0].GetProperty("recommendationAction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("fileType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("pathRecommendations")[0].GetProperty("configurationStatus").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.Delete("<groupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.Delete("<groupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.DeleteAsync("<groupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveApplicationControlsClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.DeleteAsync("<groupName>");
            Console.WriteLine(response.Status);
        }
    }
}
