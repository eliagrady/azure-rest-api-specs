// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_SecurityContactsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSecurityContact()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            Response response = client.GetSecurityContact("<securityContactName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSecurityContact_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            Response response = client.GetSecurityContact("<securityContactName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("emails").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("phone").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("minimalSeverity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("roles")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSecurityContact_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            Response response = await client.GetSecurityContactAsync("<securityContactName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSecurityContact_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            Response response = await client.GetSecurityContactAsync("<securityContactName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("emails").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("phone").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("minimalSeverity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("roles")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = client.Create("<securityContactName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    emails = "<emails>",
                    phone = "<phone>",
                    alertNotifications = new
                    {
                        state = "On",
                        minimalSeverity = "High",
                    },
                    notificationsByRole = new
                    {
                        state = "On",
                        roles = new[] {
                "AccountAdmin"
            },
                    },
                },
            };

            Response response = client.Create("<securityContactName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("emails").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("phone").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("minimalSeverity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("roles")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = await client.CreateAsync("<securityContactName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    emails = "<emails>",
                    phone = "<phone>",
                    alertNotifications = new
                    {
                        state = "On",
                        minimalSeverity = "High",
                    },
                    notificationsByRole = new
                    {
                        state = "On",
                        roles = new[] {
                "AccountAdmin"
            },
                    },
                },
            };

            Response response = await client.CreateAsync("<securityContactName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("emails").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("phone").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("minimalSeverity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("roles")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            Response response = client.Delete("<securityContactName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            Response response = client.Delete("<securityContactName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<securityContactName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<securityContactName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSecurityContacts()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            foreach (var item in client.GetSecurityContacts(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSecurityContacts_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            foreach (var item in client.GetSecurityContacts(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("emails").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("phone").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("minimalSeverity").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("roles")[0].ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSecurityContacts_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetSecurityContactsAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSecurityContacts_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityContactsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetSecurityContactsAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("emails").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("phone").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("alertNotifications").GetProperty("minimalSeverity").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("notificationsByRole").GetProperty("roles")[0].ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
