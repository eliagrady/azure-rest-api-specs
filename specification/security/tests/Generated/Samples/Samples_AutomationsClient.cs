// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_AutomationsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAutomation()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            Response response = client.GetAutomation("<resourceGroupName>", "<automationName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAutomation_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            Response response = client.GetAutomation("<resourceGroupName>", "<automationName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAutomation_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            Response response = await client.GetAutomationAsync("<resourceGroupName>", "<automationName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAutomation_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            Response response = await client.GetAutomationAsync("<resourceGroupName>", "<automationName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = client.CreateOrUpdate("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    description = "<description>",
                    isEnabled = true,
                    scopes = new[] {
            new {
                description = "<description>",
                scopePath = "<scopePath>",
            }
        },
                    sources = new[] {
            new {
                eventSource = "Assessments",
                ruleSets = new[] {
                    new {
                        rules = new[] {
                            new {
                                propertyJPath = "<propertyJPath>",
                                propertyType = "String",
                                expectedValue = "<expectedValue>",
                                @operator = "Equals",
                            }
                        },
                    }
                },
            }
        },
                    actions = new[] {
            new {
                logicAppResourceId = "<logicAppResourceId>",
                uri = "http://localhost:3000",
                actionType = "LogicApp",
            }
        },
                },
            };

            Response response = client.CreateOrUpdate("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    description = "<description>",
                    isEnabled = true,
                    scopes = new[] {
            new {
                description = "<description>",
                scopePath = "<scopePath>",
            }
        },
                    sources = new[] {
            new {
                eventSource = "Assessments",
                ruleSets = new[] {
                    new {
                        rules = new[] {
                            new {
                                propertyJPath = "<propertyJPath>",
                                propertyType = "String",
                                expectedValue = "<expectedValue>",
                                @operator = "Equals",
                            }
                        },
                    }
                },
            }
        },
                    actions = new[] {
            new {
                logicAppResourceId = "<logicAppResourceId>",
                uri = "http://localhost:3000",
                actionType = "LogicApp",
            }
        },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<automationName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<automationName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<automationName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<automationName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Validate()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = client.Validate("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Validate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    description = "<description>",
                    isEnabled = true,
                    scopes = new[] {
            new {
                description = "<description>",
                scopePath = "<scopePath>",
            }
        },
                    sources = new[] {
            new {
                eventSource = "Assessments",
                ruleSets = new[] {
                    new {
                        rules = new[] {
                            new {
                                propertyJPath = "<propertyJPath>",
                                propertyType = "String",
                                expectedValue = "<expectedValue>",
                                @operator = "Equals",
                            }
                        },
                    }
                },
            }
        },
                    actions = new[] {
            new {
                logicAppResourceId = "<logicAppResourceId>",
                uri = "http://localhost:3000",
                actionType = "LogicApp",
            }
        },
                },
            };

            Response response = client.Validate("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isValid").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Validate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            var data = new { };

            Response response = await client.ValidateAsync("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Validate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    description = "<description>",
                    isEnabled = true,
                    scopes = new[] {
            new {
                description = "<description>",
                scopePath = "<scopePath>",
            }
        },
                    sources = new[] {
            new {
                eventSource = "Assessments",
                ruleSets = new[] {
                    new {
                        rules = new[] {
                            new {
                                propertyJPath = "<propertyJPath>",
                                propertyType = "String",
                                expectedValue = "<expectedValue>",
                                @operator = "Equals",
                            }
                        },
                    }
                },
            }
        },
                    actions = new[] {
            new {
                logicAppResourceId = "<logicAppResourceId>",
                uri = "http://localhost:3000",
                actionType = "LogicApp",
            }
        },
                },
            };

            Response response = await client.ValidateAsync("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isValid").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAutomations()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            foreach (var item in client.GetAutomations(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAutomations_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            foreach (var item in client.GetAutomations(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAutomations_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAutomationsAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAutomations_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAutomationsAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAutomationsByResourceGroup()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            foreach (var item in client.GetAutomationsByResourceGroup("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAutomationsByResourceGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            foreach (var item in client.GetAutomationsByResourceGroup("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAutomationsByResourceGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAutomationsByResourceGroupAsync("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAutomationsByResourceGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AutomationsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAutomationsByResourceGroupAsync("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
