// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_DeviceSecurityGroupsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceSecurityGroup()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            Response response = client.GetDeviceSecurityGroup("<resourceId>", "<deviceSecurityGroupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceSecurityGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            Response response = client.GetDeviceSecurityGroup("<resourceId>", "<deviceSecurityGroupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceSecurityGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            Response response = await client.GetDeviceSecurityGroupAsync("<resourceId>", "<deviceSecurityGroupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceSecurityGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            Response response = await client.GetDeviceSecurityGroupAsync("<resourceId>", "<deviceSecurityGroupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            var data = new { };

            Response response = client.CreateOrUpdate("<resourceId>", "<deviceSecurityGroupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            var data = new
            {
                properties = new
                {
                    thresholdRules = new[] {
            new {
                timeWindowSize = "PT1H23M45S",
                minThreshold = 1234,
                maxThreshold = 1234,
                isEnabled = true,
                ruleType = "TimeWindowCustomAlertRule",
            }
        },
                    timeWindowRules = new[] {
            new {
                timeWindowSize = "PT1H23M45S",
                minThreshold = 1234,
                maxThreshold = 1234,
                isEnabled = true,
                ruleType = "ActiveConnectionsNotInAllowedRange",
            }
        },
                    allowlistRules = new[] {
            new {
                allowlistValues = new[] {
                    "<String>"
                },
                isEnabled = true,
                ruleType = "ConnectionToIpNotAllowed",
            }
        },
                    denylistRules = new[] {
            new {
                denylistValues = new[] {
                    "<String>"
                },
                isEnabled = true,
                ruleType = "DenylistCustomAlertRule",
            }
        },
                },
            };

            Response response = client.CreateOrUpdate("<resourceId>", "<deviceSecurityGroupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            var data = new { };

            Response response = await client.CreateOrUpdateAsync("<resourceId>", "<deviceSecurityGroupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            var data = new
            {
                properties = new
                {
                    thresholdRules = new[] {
            new {
                timeWindowSize = "PT1H23M45S",
                minThreshold = 1234,
                maxThreshold = 1234,
                isEnabled = true,
                ruleType = "TimeWindowCustomAlertRule",
            }
        },
                    timeWindowRules = new[] {
            new {
                timeWindowSize = "PT1H23M45S",
                minThreshold = 1234,
                maxThreshold = 1234,
                isEnabled = true,
                ruleType = "ActiveConnectionsNotInAllowedRange",
            }
        },
                    allowlistRules = new[] {
            new {
                allowlistValues = new[] {
                    "<String>"
                },
                isEnabled = true,
                ruleType = "ConnectionToIpNotAllowed",
            }
        },
                    denylistRules = new[] {
            new {
                denylistValues = new[] {
                    "<String>"
                },
                isEnabled = true,
                ruleType = "DenylistCustomAlertRule",
            }
        },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<resourceId>", "<deviceSecurityGroupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            Response response = client.Delete("<resourceId>", "<deviceSecurityGroupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            Response response = client.Delete("<resourceId>", "<deviceSecurityGroupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            Response response = await client.DeleteAsync("<resourceId>", "<deviceSecurityGroupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            Response response = await client.DeleteAsync("<resourceId>", "<deviceSecurityGroupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceSecurityGroups()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            foreach (var item in client.GetDeviceSecurityGroups("<resourceId>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceSecurityGroups_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            foreach (var item in client.GetDeviceSecurityGroups("<resourceId>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceSecurityGroups_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            await foreach (var item in client.GetDeviceSecurityGroupsAsync("<resourceId>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceSecurityGroups_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new DeviceSecurityGroupsClient(credential);

            await foreach (var item in client.GetDeviceSecurityGroupsAsync("<resourceId>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
