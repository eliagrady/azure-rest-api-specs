// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_GovernanceAssignmentsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGovernanceAssignment()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            Response response = client.GetGovernanceAssignment("<scope>", "<assessmentName>", "<assignmentKey>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGovernanceAssignment_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            Response response = client.GetGovernanceAssignment("<scope>", "<assessmentName>", "<assignmentKey>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("owner").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDueDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("eta").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("justification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketNumber").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketLink").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketStatus").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGovernanceAssignment_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            Response response = await client.GetGovernanceAssignmentAsync("<scope>", "<assessmentName>", "<assignmentKey>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGovernanceAssignment_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            Response response = await client.GetGovernanceAssignmentAsync("<scope>", "<assessmentName>", "<assignmentKey>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("owner").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDueDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("eta").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("justification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketNumber").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketLink").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketStatus").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            var data = new { };

            Response response = client.CreateOrUpdate("<scope>", "<assessmentName>", "<assignmentKey>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            var data = new
            {
                properties = new
                {
                    owner = "<owner>",
                    remediationDueDate = "2022-05-10T18:57:31.2311892Z",
                    remediationEta = new
                    {
                        eta = "2022-05-10T18:57:31.2311892Z",
                        justification = "<justification>",
                    },
                    isGracePeriod = true,
                    governanceEmailNotification = new
                    {
                        disableManagerEmailNotification = true,
                        disableOwnerEmailNotification = true,
                    },
                    additionalData = new
                    {
                        ticketNumber = 1234,
                        ticketLink = "<ticketLink>",
                        ticketStatus = "<ticketStatus>",
                    },
                },
            };

            Response response = client.CreateOrUpdate("<scope>", "<assessmentName>", "<assignmentKey>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("owner").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDueDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("eta").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("justification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketNumber").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketLink").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketStatus").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            var data = new { };

            Response response = await client.CreateOrUpdateAsync("<scope>", "<assessmentName>", "<assignmentKey>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            var data = new
            {
                properties = new
                {
                    owner = "<owner>",
                    remediationDueDate = "2022-05-10T18:57:31.2311892Z",
                    remediationEta = new
                    {
                        eta = "2022-05-10T18:57:31.2311892Z",
                        justification = "<justification>",
                    },
                    isGracePeriod = true,
                    governanceEmailNotification = new
                    {
                        disableManagerEmailNotification = true,
                        disableOwnerEmailNotification = true,
                    },
                    additionalData = new
                    {
                        ticketNumber = 1234,
                        ticketLink = "<ticketLink>",
                        ticketStatus = "<ticketStatus>",
                    },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<scope>", "<assessmentName>", "<assignmentKey>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("owner").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDueDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("eta").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("justification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketNumber").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketLink").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketStatus").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            Response response = client.Delete("<scope>", "<assessmentName>", "<assignmentKey>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            Response response = client.Delete("<scope>", "<assessmentName>", "<assignmentKey>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            Response response = await client.DeleteAsync("<scope>", "<assessmentName>", "<assignmentKey>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            Response response = await client.DeleteAsync("<scope>", "<assessmentName>", "<assignmentKey>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGovernanceAssignments()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            foreach (var item in client.GetGovernanceAssignments("<scope>", "<assessmentName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGovernanceAssignments_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            foreach (var item in client.GetGovernanceAssignments("<scope>", "<assessmentName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("owner").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDueDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("eta").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketNumber").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketLink").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketStatus").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGovernanceAssignments_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            await foreach (var item in client.GetGovernanceAssignmentsAsync("<scope>", "<assessmentName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGovernanceAssignments_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new GovernanceAssignmentsClient(credential);

            await foreach (var item in client.GetGovernanceAssignmentsAsync("<scope>", "<assessmentName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("owner").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationDueDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("eta").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("remediationEta").GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("isGracePeriod").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableManagerEmailNotification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("governanceEmailNotification").GetProperty("disableOwnerEmailNotification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketNumber").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketLink").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("ticketStatus").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
