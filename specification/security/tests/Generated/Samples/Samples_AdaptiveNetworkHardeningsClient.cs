// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_AdaptiveNetworkHardeningsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAdaptiveNetworkHardening()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            Response response = client.GetAdaptiveNetworkHardening("<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", "<adaptiveNetworkHardeningResourceName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAdaptiveNetworkHardening_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            Response response = client.GetAdaptiveNetworkHardening("<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", "<adaptiveNetworkHardeningResourceName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("direction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("destinationPort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("protocols")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("ipAddresses")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rulesCalculationTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("effectiveNetworkSecurityGroups")[0].GetProperty("networkInterface").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("effectiveNetworkSecurityGroups")[0].GetProperty("networkSecurityGroups")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAdaptiveNetworkHardening_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            Response response = await client.GetAdaptiveNetworkHardeningAsync("<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", "<adaptiveNetworkHardeningResourceName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAdaptiveNetworkHardening_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            Response response = await client.GetAdaptiveNetworkHardeningAsync("<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", "<adaptiveNetworkHardeningResourceName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("direction").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("destinationPort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("protocols")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("ipAddresses")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("rulesCalculationTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("effectiveNetworkSecurityGroups")[0].GetProperty("networkInterface").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("effectiveNetworkSecurityGroups")[0].GetProperty("networkSecurityGroups")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAdaptiveNetworkHardeningsByExtendedResource()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            foreach (var item in client.GetAdaptiveNetworkHardeningsByExtendedResource("<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAdaptiveNetworkHardeningsByExtendedResource_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            foreach (var item in client.GetAdaptiveNetworkHardeningsByExtendedResource("<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("direction").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("destinationPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("protocols")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("ipAddresses")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rulesCalculationTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("effectiveNetworkSecurityGroups")[0].GetProperty("networkInterface").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("effectiveNetworkSecurityGroups")[0].GetProperty("networkSecurityGroups")[0].ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAdaptiveNetworkHardeningsByExtendedResource_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAdaptiveNetworkHardeningsByExtendedResourceAsync("<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAdaptiveNetworkHardeningsByExtendedResource_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            await foreach (var item in client.GetAdaptiveNetworkHardeningsByExtendedResourceAsync("<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("direction").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("destinationPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("protocols")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rules")[0].GetProperty("ipAddresses")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("rulesCalculationTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("effectiveNetworkSecurityGroups")[0].GetProperty("networkInterface").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("effectiveNetworkSecurityGroups")[0].GetProperty("networkSecurityGroups")[0].ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Enforce()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            var data = new
            {
                rules = new[] {
        new {}
    },
                networkSecurityGroups = new[] {
        "<String>"
    },
            };

            var operation = client.Enforce(WaitUntil.Completed, "<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", "<adaptiveNetworkHardeningResourceName>", RequestContent.Create(data));

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Enforce_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            var data = new
            {
                rules = new[] {
        new {
            name = "<name>",
            direction = "Inbound",
            destinationPort = 1234,
            protocols = new[] {
                "TCP"
            },
            ipAddresses = new[] {
                "<String>"
            },
        }
    },
                networkSecurityGroups = new[] {
        "<String>"
    },
            };

            var operation = client.Enforce(WaitUntil.Completed, "<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", "<adaptiveNetworkHardeningResourceName>", RequestContent.Create(data));

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Enforce_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            var data = new
            {
                rules = new[] {
        new {}
    },
                networkSecurityGroups = new[] {
        "<String>"
    },
            };

            var operation = await client.EnforceAsync(WaitUntil.Completed, "<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", "<adaptiveNetworkHardeningResourceName>", RequestContent.Create(data));

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Enforce_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AdaptiveNetworkHardeningsClient("<subscriptionId>", credential);

            var data = new
            {
                rules = new[] {
        new {
            name = "<name>",
            direction = "Inbound",
            destinationPort = 1234,
            protocols = new[] {
                "TCP"
            },
            ipAddresses = new[] {
                "<String>"
            },
        }
    },
                networkSecurityGroups = new[] {
        "<String>"
    },
            };

            var operation = await client.EnforceAsync(WaitUntil.Completed, "<resourceGroupName>", "<resourceNamespace>", "<resourceType>", "<resourceName>", "<adaptiveNetworkHardeningResourceName>", RequestContent.Create(data));

            Console.WriteLine(operation.GetRawResponse().Status);
        }
    }
}
