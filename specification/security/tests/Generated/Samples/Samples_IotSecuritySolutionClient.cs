// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_IotSecuritySolutionClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetIotSecuritySolution()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            Response response = client.GetIotSecuritySolution("<resourceGroupName>", "<solutionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetIotSecuritySolution_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            Response response = client.GetIotSecuritySolution("<resourceGroupName>", "<solutionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetIotSecuritySolution_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            Response response = await client.GetIotSecuritySolutionAsync("<resourceGroupName>", "<solutionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetIotSecuritySolution_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            Response response = await client.GetIotSecuritySolutionAsync("<resourceGroupName>", "<solutionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            var data = new { };

            Response response = client.CreateOrUpdate("<resourceGroupName>", "<solutionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            var data = new
            {
                location = "<location>",
                properties = new
                {
                    workspace = "<workspace>",
                    displayName = "<displayName>",
                    status = "Enabled",
                    export = new[] {
            "RawEvents"
        },
                    disabledDataSources = new[] {
            "TwinData"
        },
                    iotHubs = new[] {
            "<String>"
        },
                    userDefinedResources = new
                    {
                        query = "<query>",
                        querySubscriptions = new[] {
                "<String>"
            },
                    },
                    recommendationsConfiguration = new[] {
            new {
                recommendationType = "IoT_ACRAuthentication",
                status = "Disabled",
            }
        },
                    unmaskedIpLoggingStatus = "Disabled",
                    additionalWorkspaces = new[] {
            new {
                workspace = "<workspace>",
                type = "Sentinel",
                dataTypes = new[] {
                    "Alerts"
                },
            }
        },
                },
            };

            Response response = client.CreateOrUpdate("<resourceGroupName>", "<solutionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            var data = new { };

            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<solutionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            var data = new
            {
                location = "<location>",
                properties = new
                {
                    workspace = "<workspace>",
                    displayName = "<displayName>",
                    status = "Enabled",
                    export = new[] {
            "RawEvents"
        },
                    disabledDataSources = new[] {
            "TwinData"
        },
                    iotHubs = new[] {
            "<String>"
        },
                    userDefinedResources = new
                    {
                        query = "<query>",
                        querySubscriptions = new[] {
                "<String>"
            },
                    },
                    recommendationsConfiguration = new[] {
            new {
                recommendationType = "IoT_ACRAuthentication",
                status = "Disabled",
            }
        },
                    unmaskedIpLoggingStatus = "Disabled",
                    additionalWorkspaces = new[] {
            new {
                workspace = "<workspace>",
                type = "Sentinel",
                dataTypes = new[] {
                    "Alerts"
                },
            }
        },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<solutionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            var data = new { };

            Response response = client.Update("<resourceGroupName>", "<solutionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    userDefinedResources = new
                    {
                        query = "<query>",
                        querySubscriptions = new[] {
                "<String>"
            },
                    },
                    recommendationsConfiguration = new[] {
            new {
                recommendationType = "IoT_ACRAuthentication",
                status = "Disabled",
            }
        },
                },
                tags = new
                {
                    key = "<String>",
                },
            };

            Response response = client.Update("<resourceGroupName>", "<solutionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            var data = new { };

            Response response = await client.UpdateAsync("<resourceGroupName>", "<solutionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    userDefinedResources = new
                    {
                        query = "<query>",
                        querySubscriptions = new[] {
                "<String>"
            },
                    },
                    recommendationsConfiguration = new[] {
            new {
                recommendationType = "IoT_ACRAuthentication",
                status = "Disabled",
            }
        },
                },
                tags = new
                {
                    key = "<String>",
                },
            };

            Response response = await client.UpdateAsync("<resourceGroupName>", "<solutionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<solutionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<solutionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<solutionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<solutionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetIotSecuritySolutionsBySubscription()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            foreach (var item in client.GetIotSecuritySolutionsBySubscription("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetIotSecuritySolutionsBySubscription_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            foreach (var item in client.GetIotSecuritySolutionsBySubscription("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetIotSecuritySolutionsBySubscription_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            await foreach (var item in client.GetIotSecuritySolutionsBySubscriptionAsync("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetIotSecuritySolutionsBySubscription_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            await foreach (var item in client.GetIotSecuritySolutionsBySubscriptionAsync("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetIotSecuritySolutionsByResourceGroup()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            foreach (var item in client.GetIotSecuritySolutionsByResourceGroup("<resourceGroupName>", "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetIotSecuritySolutionsByResourceGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            foreach (var item in client.GetIotSecuritySolutionsByResourceGroup("<resourceGroupName>", "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetIotSecuritySolutionsByResourceGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            await foreach (var item in client.GetIotSecuritySolutionsByResourceGroupAsync("<resourceGroupName>", "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetIotSecuritySolutionsByResourceGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new IotSecuritySolutionClient("<subscriptionId>", credential);

            await foreach (var item in client.GetIotSecuritySolutionsByResourceGroupAsync("<resourceGroupName>", "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("workspace").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("export")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disabledDataSources")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("iotHubs")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("query").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("userDefinedResources").GetProperty("querySubscriptions")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("autoDiscoveredResources")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("recommendationType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommendationsConfiguration")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("unmaskedIpLoggingStatus").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("workspace").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("additionalWorkspaces")[0].GetProperty("dataTypes")[0].ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
                Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
