// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_InformationProtectionPoliciesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInformationProtectionPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            Response response = client.GetInformationProtectionPolicy("<scope>", "<informationProtectionPolicyName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInformationProtectionPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            Response response = client.GetInformationProtectionPolicy("<scope>", "<informationProtectionPolicyName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInformationProtectionPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            Response response = await client.GetInformationProtectionPolicyAsync("<scope>", "<informationProtectionPolicyName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInformationProtectionPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            Response response = await client.GetInformationProtectionPolicyAsync("<scope>", "<informationProtectionPolicyName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            var data = new { };

            Response response = client.CreateOrUpdate("<scope>", "<informationProtectionPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            var data = new
            {
                properties = new
                {
                    labels = new
                    {
                        key = new
                        {
                            displayName = "<displayName>",
                            description = "<description>",
                            rank = "None",
                            order = 1234,
                            enabled = true,
                        },
                    },
                    informationTypes = new
                    {
                        key = new
                        {
                            displayName = "<displayName>",
                            description = "<description>",
                            order = 1234,
                            recommendedLabelId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                            enabled = true,
                            custom = true,
                            keywords = new[] {
                    new {
                        pattern = "<pattern>",
                        custom = true,
                        canBeNumeric = true,
                        excluded = true,
                    }
                },
                        },
                    },
                },
            };

            Response response = client.CreateOrUpdate("<scope>", "<informationProtectionPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            var data = new { };

            Response response = await client.CreateOrUpdateAsync("<scope>", "<informationProtectionPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            var data = new
            {
                properties = new
                {
                    labels = new
                    {
                        key = new
                        {
                            displayName = "<displayName>",
                            description = "<description>",
                            rank = "None",
                            order = 1234,
                            enabled = true,
                        },
                    },
                    informationTypes = new
                    {
                        key = new
                        {
                            displayName = "<displayName>",
                            description = "<description>",
                            order = 1234,
                            recommendedLabelId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                            enabled = true,
                            custom = true,
                            keywords = new[] {
                    new {
                        pattern = "<pattern>",
                        custom = true,
                        canBeNumeric = true,
                        excluded = true,
                    }
                },
                        },
                    },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<scope>", "<informationProtectionPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInformationProtectionPolicies()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            foreach (var item in client.GetInformationProtectionPolicies("<scope>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInformationProtectionPolicies_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            foreach (var item in client.GetInformationProtectionPolicies("<scope>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInformationProtectionPolicies_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            await foreach (var item in client.GetInformationProtectionPoliciesAsync("<scope>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInformationProtectionPolicies_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new InformationProtectionPoliciesClient(credential);

            await foreach (var item in client.GetInformationProtectionPoliciesAsync("<scope>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
