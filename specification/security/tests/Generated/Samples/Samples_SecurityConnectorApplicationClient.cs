// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_SecurityConnectorApplicationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSecurityConnectorApplication()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            Response response = client.GetSecurityConnectorApplication("<resourceGroupName>", "<securityConnectorName>", "<applicationId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSecurityConnectorApplication_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            Response response = client.GetSecurityConnectorApplication("<resourceGroupName>", "<securityConnectorName>", "<applicationId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSecurityConnectorApplication_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            Response response = await client.GetSecurityConnectorApplicationAsync("<resourceGroupName>", "<securityConnectorName>", "<applicationId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSecurityConnectorApplication_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            Response response = await client.GetSecurityConnectorApplicationAsync("<resourceGroupName>", "<securityConnectorName>", "<applicationId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            var data = new { };

            Response response = client.CreateOrUpdate("<resourceGroupName>", "<securityConnectorName>", "<applicationId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    displayName = "<displayName>",
                    description = "<description>",
                    sourceResourceType = "Assessments",
                    conditionSets = new[] {
            new {}
        },
                },
            };

            Response response = client.CreateOrUpdate("<resourceGroupName>", "<securityConnectorName>", "<applicationId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            var data = new { };

            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<securityConnectorName>", "<applicationId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            var data = new
            {
                properties = new
                {
                    displayName = "<displayName>",
                    description = "<description>",
                    sourceResourceType = "Assessments",
                    conditionSets = new[] {
            new {}
        },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<securityConnectorName>", "<applicationId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sourceResourceType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("conditionSets")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<securityConnectorName>", "<applicationId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<securityConnectorName>", "<applicationId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<securityConnectorName>", "<applicationId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new SecurityConnectorApplicationClient("<subscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<securityConnectorName>", "<applicationId>");
            Console.WriteLine(response.Status);
        }
    }
}
