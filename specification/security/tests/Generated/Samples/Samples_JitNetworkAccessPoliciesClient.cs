// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace SecurityCenter.Samples
{
    public class Samples_JitNetworkAccessPoliciesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPolicy()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.GetJitNetworkAccessPolicy("<resourceGroupName>", "<jitNetworkAccessPolicyName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPolicy_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.GetJitNetworkAccessPolicy("<resourceGroupName>", "<jitNetworkAccessPolicyName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPolicy_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.GetJitNetworkAccessPolicyAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPolicy_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.GetJitNetworkAccessPolicyAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                properties = new
                {
                    virtualMachines = new[] {
            new {
                id = "<id>",
                ports = new[] {
                    new {
                        number = 1234,
                        protocol = "TCP",
                        maxRequestAccessDuration = "<maxRequestAccessDuration>",
                    }
                },
            }
        },
                },
            };

            Response response = client.CreateOrUpdate("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                properties = new
                {
                    virtualMachines = new[] {
            new {
                id = "<id>",
                ports = new[] {
                    new {
                        number = 1234,
                        protocol = "TCP",
                        allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                        allowedSourceAddressPrefixes = new[] {
                            "<String>"
                        },
                        maxRequestAccessDuration = "<maxRequestAccessDuration>",
                    }
                },
                publicIpAddress = "<publicIpAddress>",
            }
        },
                    requests = new[] {
            new {
                virtualMachines = new[] {
                    new {
                        id = "<id>",
                        ports = new[] {
                            new {
                                number = 1234,
                                allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                                allowedSourceAddressPrefixes = new[] {
                                    "<String>"
                                },
                                endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                                status = "Revoked",
                                statusReason = "Expired",
                                mappedPort = 1234,
                            }
                        },
                    }
                },
                startTimeUtc = "2022-05-10T18:57:31.2311892Z",
                requestor = "<requestor>",
                justification = "<justification>",
            }
        },
                },
            };

            Response response = client.CreateOrUpdate("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                properties = new
                {
                    virtualMachines = new[] {
            new {
                id = "<id>",
                ports = new[] {
                    new {
                        number = 1234,
                        protocol = "TCP",
                        maxRequestAccessDuration = "<maxRequestAccessDuration>",
                    }
                },
            }
        },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                properties = new
                {
                    virtualMachines = new[] {
            new {
                id = "<id>",
                ports = new[] {
                    new {
                        number = 1234,
                        protocol = "TCP",
                        allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                        allowedSourceAddressPrefixes = new[] {
                            "<String>"
                        },
                        maxRequestAccessDuration = "<maxRequestAccessDuration>",
                    }
                },
                publicIpAddress = "<publicIpAddress>",
            }
        },
                    requests = new[] {
            new {
                virtualMachines = new[] {
                    new {
                        id = "<id>",
                        ports = new[] {
                            new {
                                number = 1234,
                                allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                                allowedSourceAddressPrefixes = new[] {
                                    "<String>"
                                },
                                endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                                status = "Revoked",
                                statusReason = "Expired",
                                mappedPort = 1234,
                            }
                        },
                    }
                },
                startTimeUtc = "2022-05-10T18:57:31.2311892Z",
                requestor = "<requestor>",
                justification = "<justification>",
            }
        },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.Delete("<resourceGroupName>", "<jitNetworkAccessPolicyName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = client.Delete("<resourceGroupName>", "<jitNetworkAccessPolicyName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Initiate()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                virtualMachines = new[] {
        new {
            id = "<id>",
            ports = new[] {
                new {
                    number = 1234,
                    endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                }
            },
        }
    },
            };

            Response response = client.Initiate("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
            Console.WriteLine(result.GetProperty("startTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Initiate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                virtualMachines = new[] {
        new {
            id = "<id>",
            ports = new[] {
                new {
                    number = 1234,
                    allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                    endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                }
            },
        }
    },
                justification = "<justification>",
            };

            Response response = client.Initiate("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
            Console.WriteLine(result.GetProperty("startTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("justification").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Initiate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                virtualMachines = new[] {
        new {
            id = "<id>",
            ports = new[] {
                new {
                    number = 1234,
                    endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                }
            },
        }
    },
            };

            Response response = await client.InitiateAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
            Console.WriteLine(result.GetProperty("startTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Initiate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            var data = new
            {
                virtualMachines = new[] {
        new {
            id = "<id>",
            ports = new[] {
                new {
                    number = 1234,
                    allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                    endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                }
            },
        }
    },
                justification = "<justification>",
            };

            Response response = await client.InitiateAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
            Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
            Console.WriteLine(result.GetProperty("startTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("justification").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPolicies()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            foreach (var item in client.GetJitNetworkAccessPolicies(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPolicies_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            foreach (var item in client.GetJitNetworkAccessPolicies(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPolicies_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            await foreach (var item in client.GetJitNetworkAccessPoliciesAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPolicies_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            await foreach (var item in client.GetJitNetworkAccessPoliciesAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPoliciesByRegion()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            foreach (var item in client.GetJitNetworkAccessPoliciesByRegion(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPoliciesByRegion_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            foreach (var item in client.GetJitNetworkAccessPoliciesByRegion(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPoliciesByRegion_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            await foreach (var item in client.GetJitNetworkAccessPoliciesByRegionAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPoliciesByRegion_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            await foreach (var item in client.GetJitNetworkAccessPoliciesByRegionAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPoliciesByResourceGroup()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroup("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPoliciesByResourceGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroup("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPoliciesByResourceGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            await foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroupAsync("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPoliciesByResourceGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            await foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroupAsync("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPoliciesByResourceGroupAndRegion()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroupAndRegion("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetJitNetworkAccessPoliciesByResourceGroupAndRegion_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroupAndRegion("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPoliciesByResourceGroupAndRegion_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            await foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroupAndRegionAsync("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetJitNetworkAccessPoliciesByResourceGroupAndRegion_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

            await foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroupAndRegionAsync("<resourceGroupName>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
