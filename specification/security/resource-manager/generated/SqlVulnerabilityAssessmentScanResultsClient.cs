// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SecurityCenter
{
    // Data plane generated client.
    /// <summary> The SqlVulnerabilityAssessmentScanResults service client. </summary>
    public partial class SqlVulnerabilityAssessmentScanResultsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of SqlVulnerabilityAssessmentScanResultsClient for mocking. </summary>
        protected SqlVulnerabilityAssessmentScanResultsClient()
        {
        }

        /// <summary> Initializes a new instance of SqlVulnerabilityAssessmentScanResultsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public SqlVulnerabilityAssessmentScanResultsClient(TokenCredential credential) : this(credential, new Uri("https://management.azure.com"), new SecurityCenterClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SqlVulnerabilityAssessmentScanResultsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public SqlVulnerabilityAssessmentScanResultsClient(TokenCredential credential, Uri endpoint, SecurityCenterClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityCenterClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary>
        /// [Protocol Method] Gets the scan results of a single rule in a scan record.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="scanId"> The scan Id. Type 'latest' to get the scan results for the latest scan. </param>
        /// <param name="scanResultId"> The rule Id of the results. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="scanId"/>, <paramref name="scanResultId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> or <paramref name="scanResultId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentScanResultsClient.xml" path="doc/members/member[@name='GetSqlVulnerabilityAssessmentScanResultAsync(string,string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetSqlVulnerabilityAssessmentScanResultAsync(string resourceId, string scanId, string scanResultId, string workspaceId, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));
            Argument.AssertNotNullOrEmpty(scanResultId, nameof(scanResultId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentScanResultsClient.GetSqlVulnerabilityAssessmentScanResult");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSqlVulnerabilityAssessmentScanResultRequest(resourceId, scanId, scanResultId, workspaceId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the scan results of a single rule in a scan record.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="scanId"> The scan Id. Type 'latest' to get the scan results for the latest scan. </param>
        /// <param name="scanResultId"> The rule Id of the results. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="scanId"/>, <paramref name="scanResultId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> or <paramref name="scanResultId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentScanResultsClient.xml" path="doc/members/member[@name='GetSqlVulnerabilityAssessmentScanResult(string,string,string,string,RequestContext)']/*" />
        public virtual Response GetSqlVulnerabilityAssessmentScanResult(string resourceId, string scanId, string scanResultId, string workspaceId, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));
            Argument.AssertNotNullOrEmpty(scanResultId, nameof(scanResultId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentScanResultsClient.GetSqlVulnerabilityAssessmentScanResult");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSqlVulnerabilityAssessmentScanResultRequest(resourceId, scanId, scanResultId, workspaceId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of scan results for a single scan record.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="scanId"> The scan Id. Type 'latest' to get the scan results for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="scanId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentScanResultsClient.xml" path="doc/members/member[@name='GetSqlVulnerabilityAssessmentScanResultsAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetSqlVulnerabilityAssessmentScanResultsAsync(string resourceId, string scanId, string workspaceId, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentScanResultsClient.GetSqlVulnerabilityAssessmentScanResults");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSqlVulnerabilityAssessmentScanResultsRequest(resourceId, scanId, workspaceId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of scan results for a single scan record.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="scanId"> The scan Id. Type 'latest' to get the scan results for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="scanId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentScanResultsClient.xml" path="doc/members/member[@name='GetSqlVulnerabilityAssessmentScanResults(string,string,string,RequestContext)']/*" />
        public virtual Response GetSqlVulnerabilityAssessmentScanResults(string resourceId, string scanId, string workspaceId, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentScanResultsClient.GetSqlVulnerabilityAssessmentScanResults");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSqlVulnerabilityAssessmentScanResultsRequest(resourceId, scanId, workspaceId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetSqlVulnerabilityAssessmentScanResultRequest(string resourceId, string scanId, string scanResultId, string workspaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceId, false);
            uri.AppendPath("/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/", false);
            uri.AppendPath(scanId, true);
            uri.AppendPath("/scanResults/", false);
            uri.AppendPath(scanResultId, true);
            uri.AppendQuery("workspaceId", workspaceId, true);
            uri.AppendQuery("api-version", "2023-02-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSqlVulnerabilityAssessmentScanResultsRequest(string resourceId, string scanId, string workspaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceId, false);
            uri.AppendPath("/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/", false);
            uri.AppendPath(scanId, true);
            uri.AppendPath("/scanResults", false);
            uri.AppendQuery("workspaceId", workspaceId, true);
            uri.AppendQuery("api-version", "2023-02-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
