// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SecurityCenter
{
    // Data plane generated client.
    /// <summary> The SqlVulnerabilityAssessmentBaselineRules service client. </summary>
    public partial class SqlVulnerabilityAssessmentBaselineRulesClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of SqlVulnerabilityAssessmentBaselineRulesClient for mocking. </summary>
        protected SqlVulnerabilityAssessmentBaselineRulesClient()
        {
        }

        /// <summary> Initializes a new instance of SqlVulnerabilityAssessmentBaselineRulesClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public SqlVulnerabilityAssessmentBaselineRulesClient(TokenCredential credential) : this(credential, new Uri("https://management.azure.com"), new SecurityCenterClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SqlVulnerabilityAssessmentBaselineRulesClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public SqlVulnerabilityAssessmentBaselineRulesClient(TokenCredential credential, Uri endpoint, SecurityCenterClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityCenterClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary>
        /// [Protocol Method] Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateAsync(string resourceId, string ruleId, string workspaceId, RequestContent content, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(resourceId, ruleId, workspaceId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='CreateOrUpdate(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateOrUpdate(string resourceId, string ruleId, string workspaceId, RequestContent content, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(resourceId, ruleId, workspaceId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the results for a given rule in the Baseline.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='GetSqlVulnerabilityAssessmentBaselineRuleAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetSqlVulnerabilityAssessmentBaselineRuleAsync(string resourceId, string ruleId, string workspaceId, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.GetSqlVulnerabilityAssessmentBaselineRule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSqlVulnerabilityAssessmentBaselineRuleRequest(resourceId, ruleId, workspaceId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the results for a given rule in the Baseline.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='GetSqlVulnerabilityAssessmentBaselineRule(string,string,string,RequestContext)']/*" />
        public virtual Response GetSqlVulnerabilityAssessmentBaselineRule(string resourceId, string ruleId, string workspaceId, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.GetSqlVulnerabilityAssessmentBaselineRule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSqlVulnerabilityAssessmentBaselineRuleRequest(resourceId, ruleId, workspaceId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Deletes a rule from the Baseline of a given database.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='DeleteAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(string resourceId, string ruleId, string workspaceId, RequestContext context = null)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(resourceId, ruleId, workspaceId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Deletes a rule from the Baseline of a given database.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/>, <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='Delete(string,string,string,RequestContext)']/*" />
        public virtual Response Delete(string resourceId, string ruleId, string workspaceId, RequestContext context = null)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(resourceId, ruleId, workspaceId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the results for all rules in the Baseline.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='GetSqlVulnerabilityAssessmentBaselineRulesAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetSqlVulnerabilityAssessmentBaselineRulesAsync(string resourceId, string workspaceId, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.GetSqlVulnerabilityAssessmentBaselineRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSqlVulnerabilityAssessmentBaselineRulesRequest(resourceId, workspaceId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the results for all rules in the Baseline.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='GetSqlVulnerabilityAssessmentBaselineRules(string,string,RequestContext)']/*" />
        public virtual Response GetSqlVulnerabilityAssessmentBaselineRules(string resourceId, string workspaceId, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.GetSqlVulnerabilityAssessmentBaselineRules");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSqlVulnerabilityAssessmentBaselineRulesRequest(resourceId, workspaceId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='AddAsync(string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> AddAsync(string resourceId, string workspaceId, RequestContent content, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.Add");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddRequest(resourceId, workspaceId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/> or <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SqlVulnerabilityAssessmentBaselineRulesClient.xml" path="doc/members/member[@name='Add(string,string,RequestContent,RequestContext)']/*" />
        public virtual Response Add(string resourceId, string workspaceId, RequestContent content, RequestContext context)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = ClientDiagnostics.CreateScope("SqlVulnerabilityAssessmentBaselineRulesClient.Add");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddRequest(resourceId, workspaceId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string resourceId, string ruleId, string workspaceId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceId, false);
            uri.AppendPath("/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/", false);
            uri.AppendPath(ruleId, true);
            uri.AppendQuery("workspaceId", workspaceId, true);
            uri.AppendQuery("api-version", "2023-02-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSqlVulnerabilityAssessmentBaselineRuleRequest(string resourceId, string ruleId, string workspaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceId, false);
            uri.AppendPath("/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/", false);
            uri.AppendPath(ruleId, true);
            uri.AppendQuery("workspaceId", workspaceId, true);
            uri.AppendQuery("api-version", "2023-02-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string resourceId, string ruleId, string workspaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceId, false);
            uri.AppendPath("/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/", false);
            uri.AppendPath(ruleId, true);
            uri.AppendQuery("workspaceId", workspaceId, true);
            uri.AppendQuery("api-version", "2023-02-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSqlVulnerabilityAssessmentBaselineRulesRequest(string resourceId, string workspaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceId, false);
            uri.AppendPath("/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules", false);
            uri.AppendQuery("workspaceId", workspaceId, true);
            uri.AppendQuery("api-version", "2023-02-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAddRequest(string resourceId, string workspaceId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(resourceId, false);
            uri.AppendPath("/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules", false);
            uri.AppendQuery("workspaceId", workspaceId, true);
            uri.AppendQuery("api-version", "2023-02-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
    }
}
