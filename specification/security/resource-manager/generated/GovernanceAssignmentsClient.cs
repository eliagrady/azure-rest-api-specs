// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SecurityCenter
{
    // Data plane generated client.
    /// <summary> The GovernanceAssignments service client. </summary>
    public partial class GovernanceAssignmentsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of GovernanceAssignmentsClient for mocking. </summary>
        protected GovernanceAssignmentsClient()
        {
        }

        /// <summary> Initializes a new instance of GovernanceAssignmentsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public GovernanceAssignmentsClient(TokenCredential credential) : this(credential, new Uri("https://management.azure.com"), new SecurityCenterClientOptions())
        {
        }

        /// <summary> Initializes a new instance of GovernanceAssignmentsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public GovernanceAssignmentsClient(TokenCredential credential, Uri endpoint, SecurityCenterClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityCenterClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary>
        /// [Protocol Method] Get a specific governanceAssignment for the requested scope by AssignmentKey
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope of the Governance assignments. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'. </param>
        /// <param name="assessmentName"> The Assessment Key - A unique key for the assessment type. </param>
        /// <param name="assignmentKey"> The governance assignment key - the assessment key of the required governance assignment. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GovernanceAssignmentsClient.xml" path="doc/members/member[@name='GetGovernanceAssignmentAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetGovernanceAssignmentAsync(string scope, string assessmentName, string assignmentKey, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(scope, nameof(scope));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNullOrEmpty(assignmentKey, nameof(assignmentKey));

            using var scope0 = ClientDiagnostics.CreateScope("GovernanceAssignmentsClient.GetGovernanceAssignment");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateGetGovernanceAssignmentRequest(scope, assessmentName, assignmentKey, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get a specific governanceAssignment for the requested scope by AssignmentKey
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope of the Governance assignments. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'. </param>
        /// <param name="assessmentName"> The Assessment Key - A unique key for the assessment type. </param>
        /// <param name="assignmentKey"> The governance assignment key - the assessment key of the required governance assignment. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GovernanceAssignmentsClient.xml" path="doc/members/member[@name='GetGovernanceAssignment(string,string,string,RequestContext)']/*" />
        public virtual Response GetGovernanceAssignment(string scope, string assessmentName, string assignmentKey, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(scope, nameof(scope));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNullOrEmpty(assignmentKey, nameof(assignmentKey));

            using var scope0 = ClientDiagnostics.CreateScope("GovernanceAssignmentsClient.GetGovernanceAssignment");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateGetGovernanceAssignmentRequest(scope, assessmentName, assignmentKey, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a governance assignment on the given subscription.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope of the Governance assignments. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'. </param>
        /// <param name="assessmentName"> The Assessment Key - A unique key for the assessment type. </param>
        /// <param name="assignmentKey"> The governance assignment key - the assessment key of the required governance assignment. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="assessmentName"/>, <paramref name="assignmentKey"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GovernanceAssignmentsClient.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateAsync(string scope, string assessmentName, string assignmentKey, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(scope, nameof(scope));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNullOrEmpty(assignmentKey, nameof(assignmentKey));
            Argument.AssertNotNull(content, nameof(content));

            using var scope0 = ClientDiagnostics.CreateScope("GovernanceAssignmentsClient.CreateOrUpdate");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(scope, assessmentName, assignmentKey, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a governance assignment on the given subscription.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope of the Governance assignments. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'. </param>
        /// <param name="assessmentName"> The Assessment Key - A unique key for the assessment type. </param>
        /// <param name="assignmentKey"> The governance assignment key - the assessment key of the required governance assignment. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="assessmentName"/>, <paramref name="assignmentKey"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GovernanceAssignmentsClient.xml" path="doc/members/member[@name='CreateOrUpdate(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateOrUpdate(string scope, string assessmentName, string assignmentKey, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(scope, nameof(scope));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNullOrEmpty(assignmentKey, nameof(assignmentKey));
            Argument.AssertNotNull(content, nameof(content));

            using var scope0 = ClientDiagnostics.CreateScope("GovernanceAssignmentsClient.CreateOrUpdate");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(scope, assessmentName, assignmentKey, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delete a GovernanceAssignment over a given scope
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope of the Governance assignments. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'. </param>
        /// <param name="assessmentName"> The Assessment Key - A unique key for the assessment type. </param>
        /// <param name="assignmentKey"> The governance assignment key - the assessment key of the required governance assignment. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GovernanceAssignmentsClient.xml" path="doc/members/member[@name='DeleteAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(string scope, string assessmentName, string assignmentKey, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(scope, nameof(scope));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNullOrEmpty(assignmentKey, nameof(assignmentKey));

            using var scope0 = ClientDiagnostics.CreateScope("GovernanceAssignmentsClient.Delete");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(scope, assessmentName, assignmentKey, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delete a GovernanceAssignment over a given scope
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope of the Governance assignments. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'. </param>
        /// <param name="assessmentName"> The Assessment Key - A unique key for the assessment type. </param>
        /// <param name="assignmentKey"> The governance assignment key - the assessment key of the required governance assignment. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scope"/>, <paramref name="assessmentName"/> or <paramref name="assignmentKey"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GovernanceAssignmentsClient.xml" path="doc/members/member[@name='Delete(string,string,string,RequestContext)']/*" />
        public virtual Response Delete(string scope, string assessmentName, string assignmentKey, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(scope, nameof(scope));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNullOrEmpty(assignmentKey, nameof(assignmentKey));

            using var scope0 = ClientDiagnostics.CreateScope("GovernanceAssignmentsClient.Delete");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(scope, assessmentName, assignmentKey, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get governance assignments on all of your resources inside a scope
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope of the Governance assignments. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'. </param>
        /// <param name="assessmentName"> The Assessment Key - A unique key for the assessment type. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> or <paramref name="assessmentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scope"/> or <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/GovernanceAssignmentsClient.xml" path="doc/members/member[@name='GetGovernanceAssignmentsAsync(string,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetGovernanceAssignmentsAsync(string scope, string assessmentName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(scope, nameof(scope));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetGovernanceAssignmentsRequest(scope, assessmentName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetGovernanceAssignmentsNextPageRequest(nextLink, scope, assessmentName, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "GovernanceAssignmentsClient.GetGovernanceAssignments", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Get governance assignments on all of your resources inside a scope
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope of the Governance assignments. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'. </param>
        /// <param name="assessmentName"> The Assessment Key - A unique key for the assessment type. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> or <paramref name="assessmentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scope"/> or <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/GovernanceAssignmentsClient.xml" path="doc/members/member[@name='GetGovernanceAssignments(string,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetGovernanceAssignments(string scope, string assessmentName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(scope, nameof(scope));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetGovernanceAssignmentsRequest(scope, assessmentName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetGovernanceAssignmentsNextPageRequest(nextLink, scope, assessmentName, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "GovernanceAssignmentsClient.GetGovernanceAssignments", "value", "nextLink", context);
        }

        internal HttpMessage CreateGetGovernanceAssignmentsRequest(string scope, string assessmentName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, true);
            uri.AppendPath("/providers/Microsoft.Security/assessments/", false);
            uri.AppendPath(assessmentName, true);
            uri.AppendPath("/governanceAssignments", false);
            uri.AppendQuery("api-version", "2022-01-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGovernanceAssignmentRequest(string scope, string assessmentName, string assignmentKey, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, true);
            uri.AppendPath("/providers/Microsoft.Security/assessments/", false);
            uri.AppendPath(assessmentName, true);
            uri.AppendPath("/governanceAssignments/", false);
            uri.AppendPath(assignmentKey, true);
            uri.AppendQuery("api-version", "2022-01-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string scope, string assessmentName, string assignmentKey, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, true);
            uri.AppendPath("/providers/Microsoft.Security/assessments/", false);
            uri.AppendPath(assessmentName, true);
            uri.AppendPath("/governanceAssignments/", false);
            uri.AppendPath(assignmentKey, true);
            uri.AppendQuery("api-version", "2022-01-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string scope, string assessmentName, string assignmentKey, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, true);
            uri.AppendPath("/providers/Microsoft.Security/assessments/", false);
            uri.AppendPath(assessmentName, true);
            uri.AppendPath("/governanceAssignments/", false);
            uri.AppendPath(assignmentKey, true);
            uri.AppendQuery("api-version", "2022-01-01-preview", true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetGovernanceAssignmentsNextPageRequest(string nextLink, string scope, string assessmentName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
    }
}
