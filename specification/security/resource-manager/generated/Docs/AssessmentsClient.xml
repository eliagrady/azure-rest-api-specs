<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAssessmentAsync(string,string,string,RequestContext)">
<example>
This sample shows how to call GetAssessmentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

Response response = await client.GetAssessmentAsync("<resourceId>", "<assessmentName>", "<expand>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("firstEvaluationDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("statusChangeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("cause").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("resourceDetails").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("links").GetProperty("azurePortalUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("policyDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("remediationDescription").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("userImpact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("implementationEffort").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("threats")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("preview").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("assessmentType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("partnerName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("partnerName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="GetAssessment(string,string,string,RequestContext)">
<example>
This sample shows how to call GetAssessment with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

Response response = client.GetAssessment("<resourceId>", "<assessmentName>", "<expand>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("firstEvaluationDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("statusChangeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("cause").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("resourceDetails").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("links").GetProperty("azurePortalUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("policyDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("remediationDescription").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("userImpact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("implementationEffort").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("threats")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("preview").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("assessmentType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("partnerName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("partnerName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdateAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<resourceId>", "<assessmentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

var data = new {
    properties = new {
        status = new {
            code = "Healthy",
            cause = "<cause>",
            description = "<description>",
        },
        resourceDetails = new {
            source = "Azure",
        },
        additionalData = new {
            key = "<String>",
        },
        metadata = new {
            publishDates = new {
                GA = "<GA>",
                @public = "<public>",
            },
            plannedDeprecationDate = "<plannedDeprecationDate>",
            tactics = new[] {
                "Reconnaissance"
            },
            techniques = new[] {
                "Abuse Elevation Control Mechanism"
            },
            displayName = "<displayName>",
            description = "<description>",
            remediationDescription = "<remediationDescription>",
            categories = new[] {
                "Compute"
            },
            severity = "Low",
            userImpact = "Low",
            implementationEffort = "Low",
            threats = new[] {
                "accountBreach"
            },
            preview = true,
            assessmentType = "BuiltIn",
            partnerData = new {
                partnerName = "<partnerName>",
                productName = "<productName>",
                secret = "<secret>",
            },
        },
        partnersData = new {
            partnerName = "<partnerName>",
            secret = "<secret>",
        },
    },
};

Response response = await client.CreateOrUpdateAsync("<resourceId>", "<assessmentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("firstEvaluationDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("statusChangeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("cause").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("resourceDetails").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("links").GetProperty("azurePortalUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("policyDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("remediationDescription").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("userImpact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("implementationEffort").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("threats")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("preview").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("assessmentType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("partnerName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("partnerName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdate(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

var data = new {};

Response response = client.CreateOrUpdate("<resourceId>", "<assessmentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

var data = new {
    properties = new {
        status = new {
            code = "Healthy",
            cause = "<cause>",
            description = "<description>",
        },
        resourceDetails = new {
            source = "Azure",
        },
        additionalData = new {
            key = "<String>",
        },
        metadata = new {
            publishDates = new {
                GA = "<GA>",
                @public = "<public>",
            },
            plannedDeprecationDate = "<plannedDeprecationDate>",
            tactics = new[] {
                "Reconnaissance"
            },
            techniques = new[] {
                "Abuse Elevation Control Mechanism"
            },
            displayName = "<displayName>",
            description = "<description>",
            remediationDescription = "<remediationDescription>",
            categories = new[] {
                "Compute"
            },
            severity = "Low",
            userImpact = "Low",
            implementationEffort = "Low",
            threats = new[] {
                "accountBreach"
            },
            preview = true,
            assessmentType = "BuiltIn",
            partnerData = new {
                partnerName = "<partnerName>",
                productName = "<productName>",
                secret = "<secret>",
            },
        },
        partnersData = new {
            partnerName = "<partnerName>",
            secret = "<secret>",
        },
    },
};

Response response = client.CreateOrUpdate("<resourceId>", "<assessmentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("firstEvaluationDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("statusChangeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("cause").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("resourceDetails").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("links").GetProperty("azurePortalUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("policyDefinitionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("remediationDescription").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("userImpact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("implementationEffort").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("threats")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("preview").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("assessmentType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("partnerName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("partnerName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteAsync(string,string,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

Response response = await client.DeleteAsync("<resourceId>", "<assessmentName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(string,string,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

Response response = client.Delete("<resourceId>", "<assessmentName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetAssessmentsAsync(string,RequestContext)">
<example>
This sample shows how to call GetAssessmentsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

await foreach (var item in client.GetAssessmentsAsync("<scope>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("firstEvaluationDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("statusChangeDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("cause").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("resourceDetails").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("links").GetProperty("azurePortalUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("policyDefinitionId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("remediationDescription").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("categories")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("severity").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("userImpact").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("implementationEffort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("threats")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("preview").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("assessmentType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("partnerName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("secret").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("partnerName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("secret").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetAssessments(string,RequestContext)">
<example>
This sample shows how to call GetAssessments with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssessmentsClient(credential);

foreach (var item in client.GetAssessments("<scope>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("firstEvaluationDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("statusChangeDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("cause").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("status").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("resourceDetails").GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("additionalData").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("links").GetProperty("azurePortalUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("policyDefinitionId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("remediationDescription").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("categories")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("severity").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("userImpact").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("implementationEffort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("threats")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("preview").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("assessmentType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("partnerName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("metadata").GetProperty("partnerData").GetProperty("secret").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("partnerName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("partnersData").GetProperty("secret").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
  </members>
</doc>