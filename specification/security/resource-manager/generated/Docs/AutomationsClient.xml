<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAutomationAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetAutomationAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

Response response = await client.GetAutomationAsync("<resourceGroupName>", "<automationName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="GetAutomation(string,string,RequestContext)">
<example>
This sample shows how to call GetAutomation with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

Response response = client.GetAutomation("<resourceGroupName>", "<automationName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdateAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        description = "<description>",
        isEnabled = true,
        scopes = new[] {
            new {
                description = "<description>",
                scopePath = "<scopePath>",
            }
        },
        sources = new[] {
            new {
                eventSource = "Assessments",
                ruleSets = new[] {
                    new {
                        rules = new[] {
                            new {
                                propertyJPath = "<propertyJPath>",
                                propertyType = "String",
                                expectedValue = "<expectedValue>",
                                @operator = "Equals",
                            }
                        },
                    }
                },
            }
        },
        actions = new[] {
            new {
                logicAppResourceId = "<logicAppResourceId>",
                uri = "http://localhost:3000",
                actionType = "LogicApp",
            }
        },
    },
};

Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdate(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

var data = new {};

Response response = client.CreateOrUpdate("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        description = "<description>",
        isEnabled = true,
        scopes = new[] {
            new {
                description = "<description>",
                scopePath = "<scopePath>",
            }
        },
        sources = new[] {
            new {
                eventSource = "Assessments",
                ruleSets = new[] {
                    new {
                        rules = new[] {
                            new {
                                propertyJPath = "<propertyJPath>",
                                propertyType = "String",
                                expectedValue = "<expectedValue>",
                                @operator = "Equals",
                            }
                        },
                    }
                },
            }
        },
        actions = new[] {
            new {
                logicAppResourceId = "<logicAppResourceId>",
                uri = "http://localhost:3000",
                actionType = "LogicApp",
            }
        },
    },
};

Response response = client.CreateOrUpdate("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteAsync(string,string,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

Response response = await client.DeleteAsync("<resourceGroupName>", "<automationName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(string,string,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

Response response = client.Delete("<resourceGroupName>", "<automationName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ValidateAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call ValidateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

var data = new {};

Response response = await client.ValidateAsync("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ValidateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        description = "<description>",
        isEnabled = true,
        scopes = new[] {
            new {
                description = "<description>",
                scopePath = "<scopePath>",
            }
        },
        sources = new[] {
            new {
                eventSource = "Assessments",
                ruleSets = new[] {
                    new {
                        rules = new[] {
                            new {
                                propertyJPath = "<propertyJPath>",
                                propertyType = "String",
                                expectedValue = "<expectedValue>",
                                @operator = "Equals",
                            }
                        },
                    }
                },
            }
        },
        actions = new[] {
            new {
                logicAppResourceId = "<logicAppResourceId>",
                uri = "http://localhost:3000",
                actionType = "LogicApp",
            }
        },
    },
};

Response response = await client.ValidateAsync("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isValid").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
    </member>
    <member name="Validate(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call Validate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

var data = new {};

Response response = client.Validate("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Validate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        description = "<description>",
        isEnabled = true,
        scopes = new[] {
            new {
                description = "<description>",
                scopePath = "<scopePath>",
            }
        },
        sources = new[] {
            new {
                eventSource = "Assessments",
                ruleSets = new[] {
                    new {
                        rules = new[] {
                            new {
                                propertyJPath = "<propertyJPath>",
                                propertyType = "String",
                                expectedValue = "<expectedValue>",
                                @operator = "Equals",
                            }
                        },
                    }
                },
            }
        },
        actions = new[] {
            new {
                logicAppResourceId = "<logicAppResourceId>",
                uri = "http://localhost:3000",
                actionType = "LogicApp",
            }
        },
    },
};

Response response = client.Validate("<resourceGroupName>", "<automationName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isValid").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
    </member>
    <member name="GetAutomationsAsync(RequestContext)">
<example>
This sample shows how to call GetAutomationsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

await foreach (var item in client.GetAutomationsAsync(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetAutomations(RequestContext)">
<example>
This sample shows how to call GetAutomations with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

foreach (var item in client.GetAutomations(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetAutomationsByResourceGroupAsync(string,RequestContext)">
<example>
This sample shows how to call GetAutomationsByResourceGroupAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

await foreach (var item in client.GetAutomationsByResourceGroupAsync("<resourceGroupName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetAutomationsByResourceGroup(string,RequestContext)">
<example>
This sample shows how to call GetAutomationsByResourceGroup with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AutomationsClient("<subscriptionId>", credential);

foreach (var item in client.GetAutomationsByResourceGroup("<resourceGroupName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("scopes")[0].GetProperty("scopePath").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("eventSource").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyJPath").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("propertyType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("expectedValue").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sources")[0].GetProperty("ruleSets")[0].GetProperty("rules")[0].GetProperty("operator").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("actions")[0].GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
  </members>
</doc>