<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDeviceSecurityGroupAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetDeviceSecurityGroupAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

Response response = await client.GetDeviceSecurityGroupAsync("<resourceId>", "<deviceSecurityGroupName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="GetDeviceSecurityGroup(string,string,RequestContext)">
<example>
This sample shows how to call GetDeviceSecurityGroup with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

Response response = client.GetDeviceSecurityGroup("<resourceId>", "<deviceSecurityGroupName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdateAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<resourceId>", "<deviceSecurityGroupName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

var data = new {
    properties = new {
        thresholdRules = new[] {
            new {
                timeWindowSize = "PT1H23M45S",
                minThreshold = 1234,
                maxThreshold = 1234,
                isEnabled = true,
                ruleType = "TimeWindowCustomAlertRule",
            }
        },
        timeWindowRules = new[] {
            new {
                timeWindowSize = "PT1H23M45S",
                minThreshold = 1234,
                maxThreshold = 1234,
                isEnabled = true,
                ruleType = "ActiveConnectionsNotInAllowedRange",
            }
        },
        allowlistRules = new[] {
            new {
                allowlistValues = new[] {
                    "<String>"
                },
                isEnabled = true,
                ruleType = "ConnectionToIpNotAllowed",
            }
        },
        denylistRules = new[] {
            new {
                denylistValues = new[] {
                    "<String>"
                },
                isEnabled = true,
                ruleType = "DenylistCustomAlertRule",
            }
        },
    },
};

Response response = await client.CreateOrUpdateAsync("<resourceId>", "<deviceSecurityGroupName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdate(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

var data = new {};

Response response = client.CreateOrUpdate("<resourceId>", "<deviceSecurityGroupName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

var data = new {
    properties = new {
        thresholdRules = new[] {
            new {
                timeWindowSize = "PT1H23M45S",
                minThreshold = 1234,
                maxThreshold = 1234,
                isEnabled = true,
                ruleType = "TimeWindowCustomAlertRule",
            }
        },
        timeWindowRules = new[] {
            new {
                timeWindowSize = "PT1H23M45S",
                minThreshold = 1234,
                maxThreshold = 1234,
                isEnabled = true,
                ruleType = "ActiveConnectionsNotInAllowedRange",
            }
        },
        allowlistRules = new[] {
            new {
                allowlistValues = new[] {
                    "<String>"
                },
                isEnabled = true,
                ruleType = "ConnectionToIpNotAllowed",
            }
        },
        denylistRules = new[] {
            new {
                denylistValues = new[] {
                    "<String>"
                },
                isEnabled = true,
                ruleType = "DenylistCustomAlertRule",
            }
        },
    },
};

Response response = client.CreateOrUpdate("<resourceId>", "<deviceSecurityGroupName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteAsync(string,string,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

Response response = await client.DeleteAsync("<resourceId>", "<deviceSecurityGroupName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(string,string,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

Response response = client.Delete("<resourceId>", "<deviceSecurityGroupName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetDeviceSecurityGroupsAsync(string,RequestContext)">
<example>
This sample shows how to call GetDeviceSecurityGroupsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

await foreach (var item in client.GetDeviceSecurityGroupsAsync("<resourceId>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetDeviceSecurityGroups(string,RequestContext)">
<example>
This sample shows how to call GetDeviceSecurityGroups with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new DeviceSecurityGroupsClient(credential);

foreach (var item in client.GetDeviceSecurityGroups("<resourceId>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("minThreshold").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("maxThreshold").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("thresholdRules")[0].GetProperty("ruleType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("timeWindowSize").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("minThreshold").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("maxThreshold").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindowRules")[0].GetProperty("ruleType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("allowlistValues")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("valueType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("allowlistRules")[0].GetProperty("ruleType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("denylistValues")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("valueType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("denylistRules")[0].GetProperty("ruleType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
  </members>
</doc>