<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetConnectorAsync(string,RequestContext)">
<example>
This sample shows how to call GetConnectorAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

Response response = await client.GetConnectorAsync("<connectorName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="GetConnector(string,RequestContext)">
<example>
This sample shows how to call GetConnector with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

Response response = client.GetConnector("<connectorName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdateAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<connectorName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        hybridComputeSettings = new {
            autoProvision = "On",
            resourceGroupName = "<resourceGroupName>",
            region = "<region>",
            proxyServer = new {
                ip = "<ip>",
                port = "<port>",
            },
            servicePrincipal = new {
                applicationId = "<applicationId>",
                secret = "<secret>",
            },
        },
        authenticationDetails = new {
            awsAccessKeyId = "<awsAccessKeyId>",
            awsSecretAccessKey = "<awsSecretAccessKey>",
            authenticationType = "awsCreds",
        },
    },
};

Response response = await client.CreateOrUpdateAsync("<connectorName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdate(string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

var data = new {};

Response response = client.CreateOrUpdate("<connectorName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        hybridComputeSettings = new {
            autoProvision = "On",
            resourceGroupName = "<resourceGroupName>",
            region = "<region>",
            proxyServer = new {
                ip = "<ip>",
                port = "<port>",
            },
            servicePrincipal = new {
                applicationId = "<applicationId>",
                secret = "<secret>",
            },
        },
        authenticationDetails = new {
            awsAccessKeyId = "<awsAccessKeyId>",
            awsSecretAccessKey = "<awsSecretAccessKey>",
            authenticationType = "awsCreds",
        },
    },
};

Response response = client.CreateOrUpdate("<connectorName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteAsync(string,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

Response response = await client.DeleteAsync("<connectorName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(string,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

Response response = client.Delete("<connectorName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetConnectorsAsync(RequestContext)">
<example>
This sample shows how to call GetConnectorsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

await foreach (var item in client.GetConnectorsAsync(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetConnectors(RequestContext)">
<example>
This sample shows how to call GetConnectors with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ConnectorsClient("<subscriptionId>", credential);

foreach (var item in client.GetConnectors(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("hybridComputeProvisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("autoProvision").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("resourceGroupName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("region").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("ip").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("proxyServer").GetProperty("port").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("applicationId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("hybridComputeSettings").GetProperty("servicePrincipal").GetProperty("secret").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationProvisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("grantedPermissions")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("authenticationDetails").GetProperty("authenticationType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
  </members>
</doc>