<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetJitNetworkAccessPolicyAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPolicyAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

Response response = await client.GetJitNetworkAccessPolicyAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="GetJitNetworkAccessPolicy(string,string,RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPolicy with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

Response response = client.GetJitNetworkAccessPolicy("<resourceGroupName>", "<jitNetworkAccessPolicyName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdateAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

var data = new {
    properties = new {
        virtualMachines = new[] {
            new {
                id = "<id>",
                ports = new[] {
                    new {
                        number = 1234,
                        protocol = "TCP",
                        maxRequestAccessDuration = "<maxRequestAccessDuration>",
                    }
                },
            }
        },
    },
};

Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

var data = new {
    properties = new {
        virtualMachines = new[] {
            new {
                id = "<id>",
                ports = new[] {
                    new {
                        number = 1234,
                        protocol = "TCP",
                        allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                        allowedSourceAddressPrefixes = new[] {
                            "<String>"
                        },
                        maxRequestAccessDuration = "<maxRequestAccessDuration>",
                    }
                },
                publicIpAddress = "<publicIpAddress>",
            }
        },
        requests = new[] {
            new {
                virtualMachines = new[] {
                    new {
                        id = "<id>",
                        ports = new[] {
                            new {
                                number = 1234,
                                allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                                allowedSourceAddressPrefixes = new[] {
                                    "<String>"
                                },
                                endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                                status = "Revoked",
                                statusReason = "Expired",
                                mappedPort = 1234,
                            }
                        },
                    }
                },
                startTimeUtc = "2022-05-10T18:57:31.2311892Z",
                requestor = "<requestor>",
                justification = "<justification>",
            }
        },
    },
};

Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdate(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

var data = new {
    properties = new {
        virtualMachines = new[] {
            new {
                id = "<id>",
                ports = new[] {
                    new {
                        number = 1234,
                        protocol = "TCP",
                        maxRequestAccessDuration = "<maxRequestAccessDuration>",
                    }
                },
            }
        },
    },
};

Response response = client.CreateOrUpdate("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

var data = new {
    properties = new {
        virtualMachines = new[] {
            new {
                id = "<id>",
                ports = new[] {
                    new {
                        number = 1234,
                        protocol = "TCP",
                        allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                        allowedSourceAddressPrefixes = new[] {
                            "<String>"
                        },
                        maxRequestAccessDuration = "<maxRequestAccessDuration>",
                    }
                },
                publicIpAddress = "<publicIpAddress>",
            }
        },
        requests = new[] {
            new {
                virtualMachines = new[] {
                    new {
                        id = "<id>",
                        ports = new[] {
                            new {
                                number = 1234,
                                allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                                allowedSourceAddressPrefixes = new[] {
                                    "<String>"
                                },
                                endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                                status = "Revoked",
                                statusReason = "Expired",
                                mappedPort = 1234,
                            }
                        },
                    }
                },
                startTimeUtc = "2022-05-10T18:57:31.2311892Z",
                requestor = "<requestor>",
                justification = "<justification>",
            }
        },
    },
};

Response response = client.CreateOrUpdate("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteAsync(string,string,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

Response response = await client.DeleteAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(string,string,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

Response response = client.Delete("<resourceGroupName>", "<jitNetworkAccessPolicyName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="InitiateAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call InitiateAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

var data = new {
    virtualMachines = new[] {
        new {
            id = "<id>",
            ports = new[] {
                new {
                    number = 1234,
                    endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                }
            },
        }
    },
};

Response response = await client.InitiateAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
Console.WriteLine(result.GetProperty("startTimeUtc").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
]]></code>
This sample shows how to call InitiateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

var data = new {
    virtualMachines = new[] {
        new {
            id = "<id>",
            ports = new[] {
                new {
                    number = 1234,
                    allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                    endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                }
            },
        }
    },
    justification = "<justification>",
};

Response response = await client.InitiateAsync("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
Console.WriteLine(result.GetProperty("startTimeUtc").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("justification").ToString());
]]></code>
</example>
    </member>
    <member name="Initiate(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call Initiate with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

var data = new {
    virtualMachines = new[] {
        new {
            id = "<id>",
            ports = new[] {
                new {
                    number = 1234,
                    endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                }
            },
        }
    },
};

Response response = client.Initiate("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
Console.WriteLine(result.GetProperty("startTimeUtc").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
]]></code>
This sample shows how to call Initiate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

var data = new {
    virtualMachines = new[] {
        new {
            id = "<id>",
            ports = new[] {
                new {
                    number = 1234,
                    allowedSourceAddressPrefix = "<allowedSourceAddressPrefix>",
                    endTimeUtc = "2022-05-10T18:57:31.2311892Z",
                }
            },
        }
    },
    justification = "<justification>",
};

Response response = client.Initiate("<resourceGroupName>", "<jitNetworkAccessPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
Console.WriteLine(result.GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
Console.WriteLine(result.GetProperty("startTimeUtc").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("justification").ToString());
]]></code>
</example>
    </member>
    <member name="GetJitNetworkAccessPoliciesAsync(RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPoliciesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

await foreach (var item in client.GetJitNetworkAccessPoliciesAsync(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetJitNetworkAccessPolicies(RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPolicies with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

foreach (var item in client.GetJitNetworkAccessPolicies(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetJitNetworkAccessPoliciesByRegionAsync(RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPoliciesByRegionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

await foreach (var item in client.GetJitNetworkAccessPoliciesByRegionAsync(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetJitNetworkAccessPoliciesByRegion(RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPoliciesByRegion with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

foreach (var item in client.GetJitNetworkAccessPoliciesByRegion(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetJitNetworkAccessPoliciesByResourceGroupAsync(string,RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPoliciesByResourceGroupAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

await foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroupAsync("<resourceGroupName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetJitNetworkAccessPoliciesByResourceGroup(string,RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPoliciesByResourceGroup with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroup("<resourceGroupName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetJitNetworkAccessPoliciesByResourceGroupAndRegionAsync(string,RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPoliciesByResourceGroupAndRegionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

await foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroupAndRegionAsync("<resourceGroupName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetJitNetworkAccessPoliciesByResourceGroupAndRegion(string,RequestContext)">
<example>
This sample shows how to call GetJitNetworkAccessPoliciesByResourceGroupAndRegion with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new JitNetworkAccessPoliciesClient("<subscriptionId>", "<ascLocation>", credential);

foreach (var item in client.GetJitNetworkAccessPoliciesByResourceGroupAndRegion("<resourceGroupName>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("protocol").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("maxRequestAccessDuration").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("publicIpAddress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("number").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("allowedSourceAddressPrefixes")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("endTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("statusReason").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("virtualMachines")[0].GetProperty("ports")[0].GetProperty("mappedPort").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("startTimeUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("requests")[0].GetProperty("justification").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
  </members>
</doc>