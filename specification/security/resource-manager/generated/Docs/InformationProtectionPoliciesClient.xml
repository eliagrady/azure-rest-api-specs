<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetInformationProtectionPolicyAsync(string,string,RequestContext)">
<example>
This sample shows how to call GetInformationProtectionPolicyAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new InformationProtectionPoliciesClient(credential);

Response response = await client.GetInformationProtectionPolicyAsync("<scope>", "<informationProtectionPolicyName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="GetInformationProtectionPolicy(string,string,RequestContext)">
<example>
This sample shows how to call GetInformationProtectionPolicy with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new InformationProtectionPoliciesClient(credential);

Response response = client.GetInformationProtectionPolicy("<scope>", "<informationProtectionPolicyName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdateAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new InformationProtectionPoliciesClient(credential);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<scope>", "<informationProtectionPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new InformationProtectionPoliciesClient(credential);

var data = new {
    properties = new {
        labels = new {
            key = new {
                displayName = "<displayName>",
                description = "<description>",
                rank = "None",
                order = 1234,
                enabled = true,
            },
        },
        informationTypes = new {
            key = new {
                displayName = "<displayName>",
                description = "<description>",
                order = 1234,
                recommendedLabelId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                enabled = true,
                custom = true,
                keywords = new[] {
                    new {
                        pattern = "<pattern>",
                        custom = true,
                        canBeNumeric = true,
                        excluded = true,
                    }
                },
            },
        },
    },
};

Response response = await client.CreateOrUpdateAsync("<scope>", "<informationProtectionPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrUpdate(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new InformationProtectionPoliciesClient(credential);

var data = new {};

Response response = client.CreateOrUpdate("<scope>", "<informationProtectionPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new InformationProtectionPoliciesClient(credential);

var data = new {
    properties = new {
        labels = new {
            key = new {
                displayName = "<displayName>",
                description = "<description>",
                rank = "None",
                order = 1234,
                enabled = true,
            },
        },
        informationTypes = new {
            key = new {
                displayName = "<displayName>",
                description = "<description>",
                order = 1234,
                recommendedLabelId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                enabled = true,
                custom = true,
                keywords = new[] {
                    new {
                        pattern = "<pattern>",
                        custom = true,
                        canBeNumeric = true,
                        excluded = true,
                    }
                },
            },
        },
    },
};

Response response = client.CreateOrUpdate("<scope>", "<informationProtectionPolicyName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
    </member>
    <member name="GetInformationProtectionPoliciesAsync(string,RequestContext)">
<example>
This sample shows how to call GetInformationProtectionPoliciesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new InformationProtectionPoliciesClient(credential);

await foreach (var item in client.GetInformationProtectionPoliciesAsync("<scope>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetInformationProtectionPolicies(string,RequestContext)">
<example>
This sample shows how to call GetInformationProtectionPolicies with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new InformationProtectionPoliciesClient(credential);

foreach (var item in client.GetInformationProtectionPolicies("<scope>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedUtc").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("rank").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("order").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("labels").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("order").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("recommendedLabelId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("custom").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("pattern").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("custom").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("canBeNumeric").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("informationTypes").GetProperty("<test>").GetProperty("keywords")[0].GetProperty("excluded").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
    </member>
  </members>
</doc>