// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core.Extensions;
using SecurityCenter;

namespace Microsoft.Extensions.Azure
{
    /// <summary> Extension methods to add <see cref="LocationsClient"/>, <see cref="Client"/>, <see cref="TasksClient"/>, <see cref="AutoProvisioningSettingsClient"/>, <see cref="CompliancesClient"/>, <see cref="InformationProtectionPoliciesClient"/>, <see cref="WorkspaceSettingsClient"/>, <see cref="AlertsSuppressionRulesClient"/>, <see cref="AutomationsClient"/>, <see cref="RegulatoryComplianceStandardsClient"/>, <see cref="RegulatoryComplianceControlsClient"/>, <see cref="RegulatoryComplianceAssessmentsClient"/>, <see cref="SubAssessmentsClient"/>, <see cref="ConnectorsClient"/>, <see cref="SecurityContactsClient"/>, <see cref="IngestionSettingsClient"/>, <see cref="SoftwareInventoriesClient"/>, <see cref="CustomAssessmentAutomationsClient"/>, <see cref="CustomEntityStoreAssignmentsClient"/>, <see cref="MdeOnboardingsClient"/>, <see cref="GovernanceAssignmentsClient"/>, <see cref="GovernanceRulesClient"/>, <see cref="ApplicationsClient"/>, <see cref="ApplicationClient"/>, <see cref="SecurityConnectorApplicationsClient"/>, <see cref="SecurityConnectorApplicationClient"/>, <see cref="APICollectionClient"/>, <see cref="APICollectionOnboardingClient"/>, <see cref="APICollectionOffboardingClient"/>, <see cref="DefenderForStorageClient"/>, <see cref="SecurityOperatorsClient"/>, <see cref="SqlVulnerabilityAssessmentBaselineRulesClient"/>, <see cref="SqlVulnerabilityAssessmentScansClient"/>, <see cref="SqlVulnerabilityAssessmentScanResultsClient"/>, <see cref="SecurityCenterClient"/>, <see cref="SensitivitySettingsClient"/>, <see cref="SecurityConnectorsClient"/>, <see cref="HealthReportsClient"/>, <see cref="ComplianceResultsClient"/>, <see cref="AdvancedThreatProtectionClient"/>, <see cref="DeviceSecurityGroupsClient"/>, <see cref="IotSecuritySolutionAnalyticsClient"/>, <see cref="IotSecuritySolutionsAnalyticsAggregatedAlertClient"/>, <see cref="IotSecuritySolutionsAnalyticsRecommendationClient"/>, <see cref="IotSecuritySolutionClient"/>, <see cref="AdaptiveNetworkHardeningsClient"/>, <see cref="AllowedConnectionsClient"/>, <see cref="AdaptiveApplicationControlsClient"/>, <see cref="DiscoveredSecuritySolutionsClient"/>, <see cref="ExternalSecuritySolutionsClient"/>, <see cref="JitNetworkAccessPoliciesClient"/>, <see cref="SecureScoresClient"/>, <see cref="SecureScoreControlsClient"/>, <see cref="SecureScoreControlDefinitionsClient"/>, <see cref="SecuritySolutionsClient"/>, <see cref="SecuritySolutionsReferenceDataClient"/>, <see cref="ServerVulnerabilityAssessmentClient"/>, <see cref="TopologyClient"/>, <see cref="AssessmentsMetadataClient"/>, <see cref="AssessmentsClient"/>, <see cref="AlertsClient"/>, <see cref="SettingsClient"/>, <see cref="PricingsClient"/>, <see cref="ServerVulnerabilityAssessmentsSettingsClient"/> to client builder. </summary>
    public static partial class SecurityCenterClientBuilderExtensions
    {
        /// <summary> Registers a <see cref="LocationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<LocationsClient, SecurityCenterClientOptions> AddLocationsClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<LocationsClient, SecurityCenterClientOptions>((options, cred) => new LocationsClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="Client"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<Client, SecurityCenterClientOptions> AddClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<Client, SecurityCenterClientOptions>((options, cred) => new Client(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="TasksClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<TasksClient, SecurityCenterClientOptions> AddTasksClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<TasksClient, SecurityCenterClientOptions>((options, cred) => new TasksClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AutoProvisioningSettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AutoProvisioningSettingsClient, SecurityCenterClientOptions> AddAutoProvisioningSettingsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AutoProvisioningSettingsClient, SecurityCenterClientOptions>((options, cred) => new AutoProvisioningSettingsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="CompliancesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<CompliancesClient, SecurityCenterClientOptions> AddCompliancesClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<CompliancesClient, SecurityCenterClientOptions>((options, cred) => new CompliancesClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="InformationProtectionPoliciesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<InformationProtectionPoliciesClient, SecurityCenterClientOptions> AddInformationProtectionPoliciesClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<InformationProtectionPoliciesClient, SecurityCenterClientOptions>((options, cred) => new InformationProtectionPoliciesClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="WorkspaceSettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<WorkspaceSettingsClient, SecurityCenterClientOptions> AddWorkspaceSettingsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<WorkspaceSettingsClient, SecurityCenterClientOptions>((options, cred) => new WorkspaceSettingsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AlertsSuppressionRulesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AlertsSuppressionRulesClient, SecurityCenterClientOptions> AddAlertsSuppressionRulesClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AlertsSuppressionRulesClient, SecurityCenterClientOptions>((options, cred) => new AlertsSuppressionRulesClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AutomationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AutomationsClient, SecurityCenterClientOptions> AddAutomationsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AutomationsClient, SecurityCenterClientOptions>((options, cred) => new AutomationsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="RegulatoryComplianceStandardsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<RegulatoryComplianceStandardsClient, SecurityCenterClientOptions> AddRegulatoryComplianceStandardsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<RegulatoryComplianceStandardsClient, SecurityCenterClientOptions>((options, cred) => new RegulatoryComplianceStandardsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="RegulatoryComplianceControlsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<RegulatoryComplianceControlsClient, SecurityCenterClientOptions> AddRegulatoryComplianceControlsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<RegulatoryComplianceControlsClient, SecurityCenterClientOptions>((options, cred) => new RegulatoryComplianceControlsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="RegulatoryComplianceAssessmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<RegulatoryComplianceAssessmentsClient, SecurityCenterClientOptions> AddRegulatoryComplianceAssessmentsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<RegulatoryComplianceAssessmentsClient, SecurityCenterClientOptions>((options, cred) => new RegulatoryComplianceAssessmentsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SubAssessmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SubAssessmentsClient, SecurityCenterClientOptions> AddSubAssessmentsClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SubAssessmentsClient, SecurityCenterClientOptions>((options, cred) => new SubAssessmentsClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="ConnectorsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<ConnectorsClient, SecurityCenterClientOptions> AddConnectorsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<ConnectorsClient, SecurityCenterClientOptions>((options, cred) => new ConnectorsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecurityContactsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecurityContactsClient, SecurityCenterClientOptions> AddSecurityContactsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecurityContactsClient, SecurityCenterClientOptions>((options, cred) => new SecurityContactsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="IngestionSettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<IngestionSettingsClient, SecurityCenterClientOptions> AddIngestionSettingsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<IngestionSettingsClient, SecurityCenterClientOptions>((options, cred) => new IngestionSettingsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SoftwareInventoriesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SoftwareInventoriesClient, SecurityCenterClientOptions> AddSoftwareInventoriesClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SoftwareInventoriesClient, SecurityCenterClientOptions>((options, cred) => new SoftwareInventoriesClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="CustomAssessmentAutomationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<CustomAssessmentAutomationsClient, SecurityCenterClientOptions> AddCustomAssessmentAutomationsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<CustomAssessmentAutomationsClient, SecurityCenterClientOptions>((options, cred) => new CustomAssessmentAutomationsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="CustomEntityStoreAssignmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<CustomEntityStoreAssignmentsClient, SecurityCenterClientOptions> AddCustomEntityStoreAssignmentsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<CustomEntityStoreAssignmentsClient, SecurityCenterClientOptions>((options, cred) => new CustomEntityStoreAssignmentsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="MdeOnboardingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<MdeOnboardingsClient, SecurityCenterClientOptions> AddMdeOnboardingsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<MdeOnboardingsClient, SecurityCenterClientOptions>((options, cred) => new MdeOnboardingsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="GovernanceAssignmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<GovernanceAssignmentsClient, SecurityCenterClientOptions> AddGovernanceAssignmentsClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<GovernanceAssignmentsClient, SecurityCenterClientOptions>((options, cred) => new GovernanceAssignmentsClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="GovernanceRulesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<GovernanceRulesClient, SecurityCenterClientOptions> AddGovernanceRulesClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<GovernanceRulesClient, SecurityCenterClientOptions>((options, cred) => new GovernanceRulesClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="ApplicationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<ApplicationsClient, SecurityCenterClientOptions> AddApplicationsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<ApplicationsClient, SecurityCenterClientOptions>((options, cred) => new ApplicationsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="ApplicationClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<ApplicationClient, SecurityCenterClientOptions> AddApplicationClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<ApplicationClient, SecurityCenterClientOptions>((options, cred) => new ApplicationClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecurityConnectorApplicationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecurityConnectorApplicationsClient, SecurityCenterClientOptions> AddSecurityConnectorApplicationsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecurityConnectorApplicationsClient, SecurityCenterClientOptions>((options, cred) => new SecurityConnectorApplicationsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecurityConnectorApplicationClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecurityConnectorApplicationClient, SecurityCenterClientOptions> AddSecurityConnectorApplicationClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecurityConnectorApplicationClient, SecurityCenterClientOptions>((options, cred) => new SecurityConnectorApplicationClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="APICollectionClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<APICollectionClient, SecurityCenterClientOptions> AddAPICollectionClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<APICollectionClient, SecurityCenterClientOptions>((options, cred) => new APICollectionClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="APICollectionOnboardingClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<APICollectionOnboardingClient, SecurityCenterClientOptions> AddAPICollectionOnboardingClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<APICollectionOnboardingClient, SecurityCenterClientOptions>((options, cred) => new APICollectionOnboardingClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="APICollectionOffboardingClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<APICollectionOffboardingClient, SecurityCenterClientOptions> AddAPICollectionOffboardingClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<APICollectionOffboardingClient, SecurityCenterClientOptions>((options, cred) => new APICollectionOffboardingClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="DefenderForStorageClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<DefenderForStorageClient, SecurityCenterClientOptions> AddDefenderForStorageClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<DefenderForStorageClient, SecurityCenterClientOptions>((options, cred) => new DefenderForStorageClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecurityOperatorsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecurityOperatorsClient, SecurityCenterClientOptions> AddSecurityOperatorsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecurityOperatorsClient, SecurityCenterClientOptions>((options, cred) => new SecurityOperatorsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SqlVulnerabilityAssessmentBaselineRulesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SqlVulnerabilityAssessmentBaselineRulesClient, SecurityCenterClientOptions> AddSqlVulnerabilityAssessmentBaselineRulesClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SqlVulnerabilityAssessmentBaselineRulesClient, SecurityCenterClientOptions>((options, cred) => new SqlVulnerabilityAssessmentBaselineRulesClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SqlVulnerabilityAssessmentScansClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SqlVulnerabilityAssessmentScansClient, SecurityCenterClientOptions> AddSqlVulnerabilityAssessmentScansClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SqlVulnerabilityAssessmentScansClient, SecurityCenterClientOptions>((options, cred) => new SqlVulnerabilityAssessmentScansClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SqlVulnerabilityAssessmentScanResultsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SqlVulnerabilityAssessmentScanResultsClient, SecurityCenterClientOptions> AddSqlVulnerabilityAssessmentScanResultsClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SqlVulnerabilityAssessmentScanResultsClient, SecurityCenterClientOptions>((options, cred) => new SqlVulnerabilityAssessmentScanResultsClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecurityCenterClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecurityCenterClient, SecurityCenterClientOptions> AddSecurityCenterClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecurityCenterClient, SecurityCenterClientOptions>((options, cred) => new SecurityCenterClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SensitivitySettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SensitivitySettingsClient, SecurityCenterClientOptions> AddSensitivitySettingsClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SensitivitySettingsClient, SecurityCenterClientOptions>((options, cred) => new SensitivitySettingsClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecurityConnectorsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecurityConnectorsClient, SecurityCenterClientOptions> AddSecurityConnectorsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecurityConnectorsClient, SecurityCenterClientOptions>((options, cred) => new SecurityConnectorsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="HealthReportsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<HealthReportsClient, SecurityCenterClientOptions> AddHealthReportsClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<HealthReportsClient, SecurityCenterClientOptions>((options, cred) => new HealthReportsClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="ComplianceResultsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<ComplianceResultsClient, SecurityCenterClientOptions> AddComplianceResultsClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<ComplianceResultsClient, SecurityCenterClientOptions>((options, cred) => new ComplianceResultsClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AdvancedThreatProtectionClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AdvancedThreatProtectionClient, SecurityCenterClientOptions> AddAdvancedThreatProtectionClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AdvancedThreatProtectionClient, SecurityCenterClientOptions>((options, cred) => new AdvancedThreatProtectionClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="DeviceSecurityGroupsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<DeviceSecurityGroupsClient, SecurityCenterClientOptions> AddDeviceSecurityGroupsClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<DeviceSecurityGroupsClient, SecurityCenterClientOptions>((options, cred) => new DeviceSecurityGroupsClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="IotSecuritySolutionAnalyticsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<IotSecuritySolutionAnalyticsClient, SecurityCenterClientOptions> AddIotSecuritySolutionAnalyticsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<IotSecuritySolutionAnalyticsClient, SecurityCenterClientOptions>((options, cred) => new IotSecuritySolutionAnalyticsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="IotSecuritySolutionsAnalyticsAggregatedAlertClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<IotSecuritySolutionsAnalyticsAggregatedAlertClient, SecurityCenterClientOptions> AddIotSecuritySolutionsAnalyticsAggregatedAlertClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<IotSecuritySolutionsAnalyticsAggregatedAlertClient, SecurityCenterClientOptions>((options, cred) => new IotSecuritySolutionsAnalyticsAggregatedAlertClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="IotSecuritySolutionsAnalyticsRecommendationClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<IotSecuritySolutionsAnalyticsRecommendationClient, SecurityCenterClientOptions> AddIotSecuritySolutionsAnalyticsRecommendationClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<IotSecuritySolutionsAnalyticsRecommendationClient, SecurityCenterClientOptions>((options, cred) => new IotSecuritySolutionsAnalyticsRecommendationClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="IotSecuritySolutionClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<IotSecuritySolutionClient, SecurityCenterClientOptions> AddIotSecuritySolutionClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<IotSecuritySolutionClient, SecurityCenterClientOptions>((options, cred) => new IotSecuritySolutionClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AdaptiveNetworkHardeningsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AdaptiveNetworkHardeningsClient, SecurityCenterClientOptions> AddAdaptiveNetworkHardeningsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AdaptiveNetworkHardeningsClient, SecurityCenterClientOptions>((options, cred) => new AdaptiveNetworkHardeningsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AllowedConnectionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AllowedConnectionsClient, SecurityCenterClientOptions> AddAllowedConnectionsClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AllowedConnectionsClient, SecurityCenterClientOptions>((options, cred) => new AllowedConnectionsClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AdaptiveApplicationControlsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AdaptiveApplicationControlsClient, SecurityCenterClientOptions> AddAdaptiveApplicationControlsClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AdaptiveApplicationControlsClient, SecurityCenterClientOptions>((options, cred) => new AdaptiveApplicationControlsClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="DiscoveredSecuritySolutionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<DiscoveredSecuritySolutionsClient, SecurityCenterClientOptions> AddDiscoveredSecuritySolutionsClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<DiscoveredSecuritySolutionsClient, SecurityCenterClientOptions>((options, cred) => new DiscoveredSecuritySolutionsClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="ExternalSecuritySolutionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<ExternalSecuritySolutionsClient, SecurityCenterClientOptions> AddExternalSecuritySolutionsClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<ExternalSecuritySolutionsClient, SecurityCenterClientOptions>((options, cred) => new ExternalSecuritySolutionsClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="JitNetworkAccessPoliciesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<JitNetworkAccessPoliciesClient, SecurityCenterClientOptions> AddJitNetworkAccessPoliciesClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<JitNetworkAccessPoliciesClient, SecurityCenterClientOptions>((options, cred) => new JitNetworkAccessPoliciesClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecureScoresClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecureScoresClient, SecurityCenterClientOptions> AddSecureScoresClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecureScoresClient, SecurityCenterClientOptions>((options, cred) => new SecureScoresClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecureScoreControlsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecureScoreControlsClient, SecurityCenterClientOptions> AddSecureScoreControlsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecureScoreControlsClient, SecurityCenterClientOptions>((options, cred) => new SecureScoreControlsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecureScoreControlDefinitionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecureScoreControlDefinitionsClient, SecurityCenterClientOptions> AddSecureScoreControlDefinitionsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecureScoreControlDefinitionsClient, SecurityCenterClientOptions>((options, cred) => new SecureScoreControlDefinitionsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecuritySolutionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecuritySolutionsClient, SecurityCenterClientOptions> AddSecuritySolutionsClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecuritySolutionsClient, SecurityCenterClientOptions>((options, cred) => new SecuritySolutionsClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SecuritySolutionsReferenceDataClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SecuritySolutionsReferenceDataClient, SecurityCenterClientOptions> AddSecuritySolutionsReferenceDataClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SecuritySolutionsReferenceDataClient, SecurityCenterClientOptions>((options, cred) => new SecuritySolutionsReferenceDataClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="ServerVulnerabilityAssessmentClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<ServerVulnerabilityAssessmentClient, SecurityCenterClientOptions> AddServerVulnerabilityAssessmentClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<ServerVulnerabilityAssessmentClient, SecurityCenterClientOptions>((options, cred) => new ServerVulnerabilityAssessmentClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="TopologyClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<TopologyClient, SecurityCenterClientOptions> AddTopologyClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<TopologyClient, SecurityCenterClientOptions>((options, cred) => new TopologyClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AssessmentsMetadataClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AssessmentsMetadataClient, SecurityCenterClientOptions> AddAssessmentsMetadataClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AssessmentsMetadataClient, SecurityCenterClientOptions>((options, cred) => new AssessmentsMetadataClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AssessmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AssessmentsClient, SecurityCenterClientOptions> AddAssessmentsClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AssessmentsClient, SecurityCenterClientOptions>((options, cred) => new AssessmentsClient(cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="AlertsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<AlertsClient, SecurityCenterClientOptions> AddAlertsClient<TBuilder>(this TBuilder builder, string subscriptionId, string ascLocation, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<AlertsClient, SecurityCenterClientOptions>((options, cred) => new AlertsClient(subscriptionId, ascLocation, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="SettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<SettingsClient, SecurityCenterClientOptions> AddSettingsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<SettingsClient, SecurityCenterClientOptions>((options, cred) => new SettingsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="PricingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<PricingsClient, SecurityCenterClientOptions> AddPricingsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<PricingsClient, SecurityCenterClientOptions>((options, cred) => new PricingsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="ServerVulnerabilityAssessmentsSettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="subscriptionId"> Azure subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        public static IAzureClientBuilder<ServerVulnerabilityAssessmentsSettingsClient, SecurityCenterClientOptions> AddServerVulnerabilityAssessmentsSettingsClient<TBuilder>(this TBuilder builder, string subscriptionId, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<ServerVulnerabilityAssessmentsSettingsClient, SecurityCenterClientOptions>((options, cred) => new ServerVulnerabilityAssessmentsSettingsClient(subscriptionId, cred, endpoint, options));
        }

        /// <summary> Registers a <see cref="LocationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<LocationsClient, SecurityCenterClientOptions> AddLocationsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<LocationsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="Client"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<Client, SecurityCenterClientOptions> AddClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Client, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="TasksClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<TasksClient, SecurityCenterClientOptions> AddTasksClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<TasksClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AutoProvisioningSettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AutoProvisioningSettingsClient, SecurityCenterClientOptions> AddAutoProvisioningSettingsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AutoProvisioningSettingsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="CompliancesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<CompliancesClient, SecurityCenterClientOptions> AddCompliancesClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<CompliancesClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="InformationProtectionPoliciesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<InformationProtectionPoliciesClient, SecurityCenterClientOptions> AddInformationProtectionPoliciesClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<InformationProtectionPoliciesClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="WorkspaceSettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<WorkspaceSettingsClient, SecurityCenterClientOptions> AddWorkspaceSettingsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<WorkspaceSettingsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AlertsSuppressionRulesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AlertsSuppressionRulesClient, SecurityCenterClientOptions> AddAlertsSuppressionRulesClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AlertsSuppressionRulesClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AutomationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AutomationsClient, SecurityCenterClientOptions> AddAutomationsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AutomationsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="RegulatoryComplianceStandardsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<RegulatoryComplianceStandardsClient, SecurityCenterClientOptions> AddRegulatoryComplianceStandardsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<RegulatoryComplianceStandardsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="RegulatoryComplianceControlsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<RegulatoryComplianceControlsClient, SecurityCenterClientOptions> AddRegulatoryComplianceControlsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<RegulatoryComplianceControlsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="RegulatoryComplianceAssessmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<RegulatoryComplianceAssessmentsClient, SecurityCenterClientOptions> AddRegulatoryComplianceAssessmentsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<RegulatoryComplianceAssessmentsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SubAssessmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SubAssessmentsClient, SecurityCenterClientOptions> AddSubAssessmentsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SubAssessmentsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="ConnectorsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<ConnectorsClient, SecurityCenterClientOptions> AddConnectorsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ConnectorsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecurityContactsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecurityContactsClient, SecurityCenterClientOptions> AddSecurityContactsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecurityContactsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="IngestionSettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<IngestionSettingsClient, SecurityCenterClientOptions> AddIngestionSettingsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<IngestionSettingsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SoftwareInventoriesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SoftwareInventoriesClient, SecurityCenterClientOptions> AddSoftwareInventoriesClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SoftwareInventoriesClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="CustomAssessmentAutomationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<CustomAssessmentAutomationsClient, SecurityCenterClientOptions> AddCustomAssessmentAutomationsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<CustomAssessmentAutomationsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="CustomEntityStoreAssignmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<CustomEntityStoreAssignmentsClient, SecurityCenterClientOptions> AddCustomEntityStoreAssignmentsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<CustomEntityStoreAssignmentsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="MdeOnboardingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<MdeOnboardingsClient, SecurityCenterClientOptions> AddMdeOnboardingsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<MdeOnboardingsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="GovernanceAssignmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<GovernanceAssignmentsClient, SecurityCenterClientOptions> AddGovernanceAssignmentsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<GovernanceAssignmentsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="GovernanceRulesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<GovernanceRulesClient, SecurityCenterClientOptions> AddGovernanceRulesClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<GovernanceRulesClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="ApplicationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<ApplicationsClient, SecurityCenterClientOptions> AddApplicationsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ApplicationsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="ApplicationClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<ApplicationClient, SecurityCenterClientOptions> AddApplicationClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ApplicationClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecurityConnectorApplicationsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecurityConnectorApplicationsClient, SecurityCenterClientOptions> AddSecurityConnectorApplicationsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecurityConnectorApplicationsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecurityConnectorApplicationClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecurityConnectorApplicationClient, SecurityCenterClientOptions> AddSecurityConnectorApplicationClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecurityConnectorApplicationClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="APICollectionClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<APICollectionClient, SecurityCenterClientOptions> AddAPICollectionClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<APICollectionClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="APICollectionOnboardingClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<APICollectionOnboardingClient, SecurityCenterClientOptions> AddAPICollectionOnboardingClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<APICollectionOnboardingClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="APICollectionOffboardingClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<APICollectionOffboardingClient, SecurityCenterClientOptions> AddAPICollectionOffboardingClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<APICollectionOffboardingClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="DefenderForStorageClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<DefenderForStorageClient, SecurityCenterClientOptions> AddDefenderForStorageClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<DefenderForStorageClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecurityOperatorsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecurityOperatorsClient, SecurityCenterClientOptions> AddSecurityOperatorsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecurityOperatorsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SqlVulnerabilityAssessmentBaselineRulesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SqlVulnerabilityAssessmentBaselineRulesClient, SecurityCenterClientOptions> AddSqlVulnerabilityAssessmentBaselineRulesClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SqlVulnerabilityAssessmentBaselineRulesClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SqlVulnerabilityAssessmentScansClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SqlVulnerabilityAssessmentScansClient, SecurityCenterClientOptions> AddSqlVulnerabilityAssessmentScansClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SqlVulnerabilityAssessmentScansClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SqlVulnerabilityAssessmentScanResultsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SqlVulnerabilityAssessmentScanResultsClient, SecurityCenterClientOptions> AddSqlVulnerabilityAssessmentScanResultsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SqlVulnerabilityAssessmentScanResultsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecurityCenterClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecurityCenterClient, SecurityCenterClientOptions> AddSecurityCenterClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecurityCenterClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SensitivitySettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SensitivitySettingsClient, SecurityCenterClientOptions> AddSensitivitySettingsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SensitivitySettingsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecurityConnectorsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecurityConnectorsClient, SecurityCenterClientOptions> AddSecurityConnectorsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecurityConnectorsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="HealthReportsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<HealthReportsClient, SecurityCenterClientOptions> AddHealthReportsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<HealthReportsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="ComplianceResultsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<ComplianceResultsClient, SecurityCenterClientOptions> AddComplianceResultsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ComplianceResultsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AdvancedThreatProtectionClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AdvancedThreatProtectionClient, SecurityCenterClientOptions> AddAdvancedThreatProtectionClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AdvancedThreatProtectionClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="DeviceSecurityGroupsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<DeviceSecurityGroupsClient, SecurityCenterClientOptions> AddDeviceSecurityGroupsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<DeviceSecurityGroupsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="IotSecuritySolutionAnalyticsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<IotSecuritySolutionAnalyticsClient, SecurityCenterClientOptions> AddIotSecuritySolutionAnalyticsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<IotSecuritySolutionAnalyticsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="IotSecuritySolutionsAnalyticsAggregatedAlertClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<IotSecuritySolutionsAnalyticsAggregatedAlertClient, SecurityCenterClientOptions> AddIotSecuritySolutionsAnalyticsAggregatedAlertClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<IotSecuritySolutionsAnalyticsAggregatedAlertClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="IotSecuritySolutionsAnalyticsRecommendationClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<IotSecuritySolutionsAnalyticsRecommendationClient, SecurityCenterClientOptions> AddIotSecuritySolutionsAnalyticsRecommendationClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<IotSecuritySolutionsAnalyticsRecommendationClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="IotSecuritySolutionClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<IotSecuritySolutionClient, SecurityCenterClientOptions> AddIotSecuritySolutionClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<IotSecuritySolutionClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AdaptiveNetworkHardeningsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AdaptiveNetworkHardeningsClient, SecurityCenterClientOptions> AddAdaptiveNetworkHardeningsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AdaptiveNetworkHardeningsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AllowedConnectionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AllowedConnectionsClient, SecurityCenterClientOptions> AddAllowedConnectionsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AllowedConnectionsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AdaptiveApplicationControlsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AdaptiveApplicationControlsClient, SecurityCenterClientOptions> AddAdaptiveApplicationControlsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AdaptiveApplicationControlsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="DiscoveredSecuritySolutionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<DiscoveredSecuritySolutionsClient, SecurityCenterClientOptions> AddDiscoveredSecuritySolutionsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<DiscoveredSecuritySolutionsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="ExternalSecuritySolutionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<ExternalSecuritySolutionsClient, SecurityCenterClientOptions> AddExternalSecuritySolutionsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ExternalSecuritySolutionsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="JitNetworkAccessPoliciesClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<JitNetworkAccessPoliciesClient, SecurityCenterClientOptions> AddJitNetworkAccessPoliciesClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<JitNetworkAccessPoliciesClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecureScoresClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecureScoresClient, SecurityCenterClientOptions> AddSecureScoresClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecureScoresClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecureScoreControlsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecureScoreControlsClient, SecurityCenterClientOptions> AddSecureScoreControlsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecureScoreControlsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecureScoreControlDefinitionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecureScoreControlDefinitionsClient, SecurityCenterClientOptions> AddSecureScoreControlDefinitionsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecureScoreControlDefinitionsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecuritySolutionsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecuritySolutionsClient, SecurityCenterClientOptions> AddSecuritySolutionsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecuritySolutionsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SecuritySolutionsReferenceDataClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SecuritySolutionsReferenceDataClient, SecurityCenterClientOptions> AddSecuritySolutionsReferenceDataClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SecuritySolutionsReferenceDataClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="ServerVulnerabilityAssessmentClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<ServerVulnerabilityAssessmentClient, SecurityCenterClientOptions> AddServerVulnerabilityAssessmentClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ServerVulnerabilityAssessmentClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="TopologyClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<TopologyClient, SecurityCenterClientOptions> AddTopologyClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<TopologyClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AssessmentsMetadataClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AssessmentsMetadataClient, SecurityCenterClientOptions> AddAssessmentsMetadataClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AssessmentsMetadataClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AssessmentsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AssessmentsClient, SecurityCenterClientOptions> AddAssessmentsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AssessmentsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="AlertsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<AlertsClient, SecurityCenterClientOptions> AddAlertsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<AlertsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="SettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<SettingsClient, SecurityCenterClientOptions> AddSettingsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<SettingsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="PricingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<PricingsClient, SecurityCenterClientOptions> AddPricingsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<PricingsClient, SecurityCenterClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="ServerVulnerabilityAssessmentsSettingsClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<ServerVulnerabilityAssessmentsSettingsClient, SecurityCenterClientOptions> AddServerVulnerabilityAssessmentsSettingsClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ServerVulnerabilityAssessmentsSettingsClient, SecurityCenterClientOptions>(configuration);
        }
    }
}
